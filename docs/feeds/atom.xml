<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Deen Games Blog</title><link href="https://www.deengames.com/blog/" rel="alternate"></link><link href="/feeds/atom.xml" rel="self"></link><id>https://www.deengames.com/blog/</id><updated>2022-02-05T00:00:00-05:00</updated><entry><title>Gem Worlds: February Update</title><link href="https://www.deengames.com/blog/2022/gem-worlds-february-update.html" rel="alternate"></link><published>2022-02-05T00:00:00-05:00</published><updated>2022-02-05T00:00:00-05:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2022-02-05:/blog/2022/gem-worlds-february-update.html</id><summary type="html">&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/xEfzhZbWVms" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;It's been a crazy two months since I wrote the last blog post. In the last post, I talked about the 21 skills and ten worlds. Since then, I &lt;a href="https://store.steampowered.com/app/1858760?utm_source=blog"&gt;launched the game on Steam&lt;/a&gt;. Based on the first month worth of metrics, it looks like the game will be a …&lt;/p&gt;</summary><content type="html">&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/xEfzhZbWVms" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;It's been a crazy two months since I wrote the last blog post. In the last post, I talked about the 21 skills and ten worlds. Since then, I &lt;a href="https://store.steampowered.com/app/1858760?utm_source=blog"&gt;launched the game on Steam&lt;/a&gt;. Based on the first month worth of metrics, it looks like the game will be a flop. (Steam gamers tend to like deep games, tend to hate puzzle games, and it looks like the roguelike aspects of this game aren't enough to lift it out of the puzzle genre.)&lt;/p&gt;
&lt;p&gt;Instead of dropping the project, I decided to cut scope, and cut the number of worlds in half, from ten to five. This will save me anything from weeks to months of development, and will allow me to shine a light on other, much-needed areas - such as audio production. Plus, if players enjoy the game, I can always add more worlds and skills later.&lt;/p&gt;
&lt;p&gt;That brings us to the completion of the fourth of five worlds. Here's a list of some of the interesting enemies you encounter in the third and fourth world:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An ice-mimic in the ice world. It looks like an ice cube, and spawns breakable ice walls as it walks.&lt;/li&gt;
&lt;li&gt;A bee-hive in the tree world; it spawns cute bees, which (sadly) can be killed, but eventually respawn.&lt;/li&gt;
&lt;li&gt;A creature that waits for you to approach, and once you do, relentlessly stalks you&lt;/li&gt;
&lt;li&gt;Troublesome teleporting tree pixies that hit you and teleport away&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see (if you look carefully) two ice mimics here: &lt;img alt="ice mimimcs in the ice world" src="https://pbs.twimg.com/media/FJvTkb2XEAAXkjZ?format=jpg&amp;amp;name=large"&gt;&lt;/p&gt;
&lt;p&gt;Here's a brief preview of the fifth and final (space / spaceship) world, featuring laser fields that oscillate on and off, and damage anything inside:&lt;/p&gt;
&lt;p&gt;&lt;img alt="laser field" src="https://i.imgur.com/z56vkiD.png"&gt;&lt;/p&gt;
&lt;p&gt;That's it for this month! If you would like to recieve weekly updates, you can sign up to &lt;a href="https://www.getrevue.co/profile/deengames"&gt;my newsletter&lt;/a&gt;. That's the best place to get updates about the game; plus, I'll be sharing the password for the beta there, when it's ready.&lt;/p&gt;</content><category term="Devlog"></category><category term="Gem Roguelike"></category></entry><entry><title>Gem Worlds: Early December Update</title><link href="https://www.deengames.com/blog/2021/gem-worlds-early-december-update.html" rel="alternate"></link><published>2021-12-03T00:00:00-05:00</published><updated>2021-12-03T00:00:00-05:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2021-12-03:/blog/2021/gem-worlds-early-december-update.html</id><summary type="html">&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/NBENhrPLzb8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;From October, I worked on designing and drawing skills for Gem Worlds. I think of the game as something like a cross between Boudler Dash and Hades: you dodge boulders, collect gems of different types, battle enemies, avoid enviornment-specific obstacles, and eventually escape through the portal. At the same time …&lt;/p&gt;</summary><content type="html">&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/NBENhrPLzb8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;From October, I worked on designing and drawing skills for Gem Worlds. I think of the game as something like a cross between Boudler Dash and Hades: you dodge boulders, collect gems of different types, battle enemies, avoid enviornment-specific obstacles, and eventually escape through the portal. At the same time, you can pick from 21 different skills - a mix of active and passive - and enemies can use skills, too!&lt;/p&gt;
&lt;p&gt;As a game designer, I hope the array of different skills will allow users to not only custom-pick the skills that best fit their personality and play-style, but also control the difficulty. In my previous game, &lt;a href="https://store.steampowered.com/app/1342600"&gt;Oneons&lt;/a&gt;, which I designed to be brutally hard, I added an optional heal skill in response to players complaining the game was too difficult; I hope that approach can work here, too.&lt;/p&gt;
&lt;p&gt;The skills break down into two categories: active, and passive. Active skills require you to use them, and come in two variations: cooldown based (e.g. usable every 4 turns), and quantity based (e.g. only 4 uses per level). These include elemental attacks like fireball (area damage), freeze (stop monsters for a few turns) to time-bombs that explode after a few seconds.&lt;/p&gt;
&lt;p&gt;Passive skills always take effect, all the time. These vary a great deal, ranging from the mundane Fireproof skill (which makes you invincible to explosions) to the game-changing Wall Walker skill (that lets you walk through walls) or the More Gems skill, which greatly increases the number of gems in a level (thus dropping the difficulty).&lt;/p&gt;
&lt;p&gt;Second, I started working on the second (or third, not sure yet) world - a desert-themed world. I couldn't draw art good enough for it to be a "crystal desert," but I hope the monster art will bring that out. The video only shows the tiles and background; here are some monsters in various stages of design, from concept to final sprite:&lt;/p&gt;
&lt;p&gt;&lt;img alt="six desert and/or crystal monsters" src="https://i.imgur.com/J4Qij6A.png"&gt;&lt;/p&gt;
&lt;p&gt;As I mentioned earlier, 21 skills, which is a lot. After the first world, which introduces the game mechanics to the player, monsters will start including their own skills - ranging from passive ones (like being explosion-proof or teleporting away if hit) to active ones that affect the player and environment in different ways.&lt;/p&gt;</content><category term="Devlog"></category><category term="Gem Roguelike"></category></entry><entry><title>Gem Worlds: November 2021</title><link href="https://www.deengames.com/blog/2021/gem-worlds-november-2021.html" rel="alternate"></link><published>2021-11-13T00:00:00-05:00</published><updated>2021-11-13T00:00:00-05:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2021-11-13:/blog/2021/gem-worlds-november-2021.html</id><summary type="html">&lt;p&gt;Hello! I took a month off from game development to focus on some personal, real-life things. Now that it's mostly settled, I'm back full-force into game development. I think it's fair to say, I'm working harder on this game than any I made so far.&lt;/p&gt;
&lt;p&gt;As I alluded to last …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello! I took a month off from game development to focus on some personal, real-life things. Now that it's mostly settled, I'm back full-force into game development. I think it's fair to say, I'm working harder on this game than any I made so far.&lt;/p&gt;
&lt;p&gt;As I alluded to last week, I spent a great deal of time reworking the game art. Here's a screenshot showing how the game looks now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://i.imgur.com/FffzxK2.png"&gt;&lt;/p&gt;
&lt;p&gt;Notably, you can see the main character changed, as well as all the monsters. They now follow the world theme, which is drawn partially from the over-arching game story (different worlds) - hence the finalized game name, "Gem Worlds."&lt;/p&gt;
&lt;p&gt;This month, I started in earnest on the skill system. You can see how it look so far: &lt;/p&gt;
&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/mASgo2hkQKs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In the playable alpha/prototype from earlier this year, players could purchase skills between runs, using (permanent) gems earned each run. You can upgrade skills, and customize your experience - everything from more health to stronger fireballs.&lt;/p&gt;
&lt;p&gt;Unlike the earlier versions, in the final game, you can only select a few skills for each run. This is to encourage players to try out different skill combinations, find synergies, upgrade the ones they like, and hopefully also customize your difficulty. You can - for example - upgrade fireballs to their max, and use them to snipe enemies from afar; or you can upgrade your health a lot, and recklessly charge into danger. (There's also an invincibility option, for anyone who wants to just see the story or complete the game more easily.)&lt;/p&gt;
&lt;p&gt;The planned skills include a combination of innate abilities, as well as technological tools. There are a lot of ways in which they can interact with each other, and with the world. I hope that will lead to more interesting, fun, surprising experiences, but that also means a lot more testing to make sure the game ships bug-free.&lt;/p&gt;
&lt;p&gt;That pretty much wraps it up for this month. If you're interested in the game, sign up to the &lt;a href="https://www.getrevue.co/profile/deengames"&gt;online newsletter&lt;/a&gt; to get weekly updates. It's not spam, but short, to-the-point weekly progress updates.&lt;/p&gt;</content><category term="Devlog"></category><category term="Gem Roguelike"></category></entry><entry><title>Gem Roguelike: September 2021</title><link href="https://www.deengames.com/blog/2021/gem-roguelike-september-2021.html" rel="alternate"></link><published>2021-09-28T00:00:00-04:00</published><updated>2021-09-28T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2021-09-28:/blog/2021/gem-roguelike-september-2021.html</id><summary type="html">&lt;p&gt;Here's me completing a single level in a new run of the gem roguelike:&lt;/p&gt;
&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/OXvcXmAjDEo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can see quite a lot of changes from last month. The most obvious one is the skill shop; specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collecting gems collects them permanently across all runs (the three types have three different values)&lt;/li&gt;
&lt;li&gt;Between …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here's me completing a single level in a new run of the gem roguelike:&lt;/p&gt;
&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/OXvcXmAjDEo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can see quite a lot of changes from last month. The most obvious one is the skill shop; specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collecting gems collects them permanently across all runs (the three types have three different values)&lt;/li&gt;
&lt;li&gt;Between runs of the game, you can upgrade your skills&lt;/li&gt;
&lt;li&gt;At the skill shop, you can buy new skills, upgrade existing skills, or buy other upgrades (e.g. health) with your collected gems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While feedback on this ran contrary to what I hoped, I decided to make the game more roguelike (-like?) - dying three times takes you back to the beginning of the current world. Along with permanent gems, I hope this will lead players down an experience like Hades, where they adventure for a while, die, upgrade a lot, and try different builds the next run-through.&lt;/p&gt;
&lt;p&gt;I also ran a limited alpha test (around six players played it and reported their feedback, incuding recordings and streams of them playing the game). Thank you all again for testing and providing feedback, be it a little or a lot - it helped me correct the course of the game and identify some much-needed things to improve upon!&lt;/p&gt;
&lt;p&gt;This month, I also completed two major blocking tasks for the game: I sat down and wrote a complete end-to-end story for the game, including designing all the major characters, and some world-building/lore. Based on this, I started modifying the first world's art to fit the theme of the first world (Brightshield masjid/mosque).&lt;/p&gt;
&lt;p&gt;I have a long way to go with art, which is the focus of this month: design the worlds in detail (including obstacles and monsters), and coding whatever's necessary to make it look good. This includes polishing the first world to a gleaming sheen, something I already sunk many hours into (and expect to sink many more). Already, you can see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New tiles&lt;/li&gt;
&lt;li&gt;A new level border&lt;/li&gt;
&lt;li&gt;A large new parallax background&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope, inshaAllah (God willing), I can complete the first world art, and some of the subsequent worlds, this month. We'll see how it goes.&lt;/p&gt;
&lt;p&gt;If you're interested in the game, sign up to the Revue newsletter &lt;a href="https://www.getrevue.co/profile/deengames"&gt;Revue newsletter&lt;/a&gt; to get weekly updates. It's not spam, but short, to-the-point weekly progress updates.&lt;/p&gt;</content><category term="Devlog"></category><category term="Gem Roguelike"></category></entry><entry><title>Gem Roguelike: August 2021</title><link href="https://www.deengames.com/blog/2021/gem-roguelike-august-2021.html" rel="alternate"></link><published>2021-09-03T00:00:00-04:00</published><updated>2021-09-03T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2021-09-03:/blog/2021/gem-roguelike-august-2021.html</id><summary type="html">&lt;p&gt;What happens if you take a classic gem-collecting boulder-dodging action puzzle, make it turn-based, and add in roguelike elements like skills, monsters, and procedurally-generated levels?&lt;/p&gt;
&lt;p&gt;This:&lt;/p&gt;
&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/kI74BXDq3PI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This is a prototype (mostly getting game systems working with placeholder or simple art) which I toiled away at for the last 30 days …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What happens if you take a classic gem-collecting boulder-dodging action puzzle, make it turn-based, and add in roguelike elements like skills, monsters, and procedurally-generated levels?&lt;/p&gt;
&lt;p&gt;This:&lt;/p&gt;
&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/kI74BXDq3PI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This is a prototype (mostly getting game systems working with placeholder or simple art) which I toiled away at for the last 30 days. Currently, it includes almost all the core systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collect gems, dodge boulders, and make it to the exit without dying&lt;/li&gt;
&lt;li&gt;Environmental elements to avoid, like explosive falling mines and lava pools&lt;/li&gt;
&lt;li&gt;Procedurally-generated levels (five completely different level types)&lt;/li&gt;
&lt;li&gt;Monsters, melee fighting, and two skills: an explosive fireball, and a stopwatch that lets you stop time for five turns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's missing? My favourite roguelike element: the ability to spend gems to buy permanent upgrades and unlock new skills.&lt;/p&gt;
&lt;p&gt;My current vision is something like a cross between Boulder Dash and Hades. You pick from an assortment of unlocked and upgraded skills, make a run, die, upgrade and pick an entirely different set, and try again. I planned 100 levels across ten different biomes, each with their own unique set of monsters and environmental dangers to deal with.&lt;/p&gt;
&lt;p&gt;If you like what you see, sign up to the &lt;a href="https://www.getrevue.co/profile/deengames"&gt;online newsletter&lt;/a&gt; to get weekly updates! In the coming days, you will also get instructions on how to access the playable prototype of the game!&lt;/p&gt;</content><category term="Devlog"></category><category term="Gem Roguelike"></category></entry><entry><title>A Practical Guide to Make Your Own Game Engine</title><link href="https://www.deengames.com/blog/2021/a-practical-guide-to-make-your-own-game-engine.html" rel="alternate"></link><published>2021-07-23T00:00:00-04:00</published><updated>2021-07-23T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2021-07-23:/blog/2021/a-practical-guide-to-make-your-own-game-engine.html</id><summary type="html">&lt;p&gt;Want to make games faster, bigger, and with better quality, while investing the same amount of time? It's possible, albeit with an unintuitive solution: a custom game engine. I'm here to tell you why you can, and should, build a custom game engine.&lt;/p&gt;
&lt;p&gt;It's 2021, and lots of strong, general-purpose …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Want to make games faster, bigger, and with better quality, while investing the same amount of time? It's possible, albeit with an unintuitive solution: a custom game engine. I'm here to tell you why you can, and should, build a custom game engine.&lt;/p&gt;
&lt;p&gt;It's 2021, and lots of strong, general-purpose game engines abound: from Unreal to Godot to GameMaker to Construct, tools exist for beginner and experienced developers alike. Why bother making your own game engine?&lt;/p&gt;
&lt;p&gt;It's a great learning tool, sure, but a better reason exists: you can &lt;em&gt;customize your game engine to your own personal style and workflow.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A great example of this is RPG Maker, which specializes in making JRPG games. Using RPG Maker, you can - very quickly, and without much coding skill - create large-scale and complex JRPGs. RPG Maker includes events for all kinds of common JRPG things (dialog, shops, inns, quest NPCs, etc.) which makes it very, very fast to build, compared to building something from scratch.&lt;/p&gt;
&lt;p&gt;Even if you think this isn't a great idea, I guarantee you will learn a ton by doing this. If you're convinced, read on.&lt;/p&gt;
&lt;h2&gt;Pick a Small Target&lt;/h2&gt;
&lt;p&gt;You're not planning to build a general-purpose, large-scale game engines. Those are difficult, and require &lt;a href="https://www.gamedesigning.org/learn/make-a-game-engine/"&gt;lots of different skillls&lt;/a&gt; which you may not have.&lt;/p&gt;
&lt;p&gt;First, identify an existing game engine, framework, library, toolkit, etc. that you use and like. What's great about it? Importantly, what's not good about it? Where can you improve upon it, or what pain-points does it inflict on you that you wish you could work around?&lt;/p&gt;
&lt;p&gt;Once you identified your starting-point, you can even build on top of an existing game engine. This way, you create a standalone library, or a thin "layer" that makes some tasks easier. It could be as simple as scene management, or as complicated as common code for a roguelike.&lt;/p&gt;
&lt;p&gt;Whatever your goal, pick something small and achievable as the first step.&lt;/p&gt;
&lt;h2&gt;Pick a Companion Game&lt;/h2&gt;
&lt;p&gt;Now, the most important part: &lt;strong&gt;do not build your game engine or framework in isolation!&lt;/strong&gt; You will end up with bloated features that are difficult to use, and code that nobody uses.  Instead, design a small standalone game that you feel really excited to build.&lt;/p&gt;
&lt;p&gt;The key: build your game &lt;em&gt;in tandem&lt;/em&gt; with your game engine. For example, if you need outlined text, add some code for that to your game engine, then add it to the titlescreen, options screen, or whatever location in your game that you need it.&lt;/p&gt;
&lt;p&gt;This keeps your code useful, streamlined, and well-tested to begin with; it greatly increases the chances that you can ship something useful at the end of your game development cycle, whether the game ships or not.&lt;/p&gt;
&lt;p&gt;Work on your game framework with that cycle: add code, test it, implement it in your game. Rinse, repeat.&lt;/p&gt;
&lt;h2&gt;Use-Case&lt;/h2&gt;
&lt;p&gt;If your game framework extends beyond a simple library, you should consider the user workflow carefully. How do users use your framework? Do they link a DLL, or copy/paste code into their project? Do you need to provide a template project with some starter code, or simply a spec for a JSON file?&lt;/p&gt;
&lt;p&gt;Looking at this early on makes it easier for users to eventually use your game framework.&lt;/p&gt;
&lt;h2&gt;Testing and Quality&lt;/h2&gt;
&lt;p&gt;Testing your game framework is really important. As it grows, you will find it increasingly likely that you accidentally break things in other places and not notice. I highly recommend writing unit tests and/or integration tests for &lt;em&gt;every single line of code you write.&lt;/em&gt; This makes it very easy to make changes: you simply run the tests, and they identify anything broken you need to fix.&lt;/p&gt;
&lt;h2&gt;A War Story: Oneons and Puffin&lt;/h2&gt;
&lt;p&gt;I applied this process to a number of game frameworks over the years (mostly abandonware). One of them, &lt;a href="https://github.com/nightblade9/puffin-v1"&gt;Puffin&lt;/a&gt;, actually shipped to production (I finished it and launched the game and the framework). It didn't meet my long-term needs, but it worked well enough.&lt;/p&gt;
&lt;p&gt;Here's a quick summary of how that came to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Target:&lt;/strong&gt; I really like Godot. One thing that frequently bugs me is the lack of free support for exporting your game for the Nintendo Switch. I'm also not a big fan of GDscript, the internal, Python-like scripting language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; I decided to build something similar to Godot - a visual IDE - albeit in C#. I chose MonoGame as my base, since I've used it before, and since it has excellent free support for porting to the Switch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Small Target:&lt;/strong&gt; For the first version of Puffin, I decided to leverage my experience with CraftyJS and build a small, easy-to-use fluent API. I based it on Entity-Component System architecture. (This isn't a good fit for Godot-like games, which use nested nodes.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start Small:&lt;/strong&gt; I build the absolute minimum code to get started: a base entity class, and some components for rendering sprites and text. That's it.  I decided I would limit myself to no IDE or UI controls, as those require a lot of additional effort to build.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Companion Game:&lt;/strong&gt; I started immediately on &lt;a href="https://store.steampowered.com/app/1342600/Oneons_Prisoners/"&gt;Oneons&lt;/a&gt;, my companion game: a tiny broughlike dungeon-crawler with 12 floors of mayhem, monsters with powers, and tactical combat. I shipped the first version of Oneons, with Puffin, in a month for the &lt;a href="https://itch.io/jam/persistent-roguelike-jam/"&gt;Persistent Game Jam&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unit testing:&lt;/strong&gt; Most of the Puffin code is unit-tested, and every commit builds and runs the test in Jenkins. This helped me notice when I accidentally broke things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ultimately, Puffin didn't meet my needs; in particular, the choice of an ECS architecture didn't mesh well with Godot-style nested scenes and subscenes.&lt;/p&gt;
&lt;p&gt;I may revisit Puffin in the future, and I certainly learned a lot about development through this experience. I hope you, too, will find the time and effort to build something, big or small, to help you build games you like faster and better than whatever you're using today.&lt;/p&gt;</content><category term="Game Development"></category></entry><entry><title>Crystal Caverns March Update</title><link href="https://www.deengames.com/blog/2021/crystal-caverns-march-update.html" rel="alternate"></link><published>2021-03-29T00:00:00-04:00</published><updated>2021-03-29T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2021-03-29:/blog/2021/crystal-caverns-march-update.html</id><summary type="html">&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/bZ1eldigeLc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Introducing Crystal Caverns, a match-3/roguelike hybrid with persistent upgrades. In the last two months, I took this game from a rough prototype to what you see in the video. At present, the game includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bare-bones battle system: players and monsters take turns attacking.&lt;/li&gt;
&lt;li&gt;A basic match-3 game with …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;iframe width="728" height="410" src="https://www.youtube.com/embed/bZ1eldigeLc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Introducing Crystal Caverns, a match-3/roguelike hybrid with persistent upgrades. In the last two months, I took this game from a rough prototype to what you see in the video. At present, the game includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bare-bones battle system: players and monsters take turns attacking.&lt;/li&gt;
&lt;li&gt;A basic match-3 game with collapse mechanics, albeit you can swap any two tiles&lt;/li&gt;
&lt;li&gt;Victory and defeat&lt;/li&gt;
&lt;li&gt;Persistent currency (crystal shards) which you retain across battles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Battles appear bare-bones at the moment, but include some depth: 
- Players can attack, critical-strike, boost defense, poison enemies, drain, and heal.
- Monster attacks affect the board in various ways (currently, they just eat random tiles).&lt;/p&gt;
&lt;p&gt;That includes enough of the core game to improve upon.&lt;/p&gt;
&lt;p&gt;Next month, I plan to turn my attention more towards the roguelike side of the game: generating dungeons with monsters, finding treasure (including persistent treasure), and balancing exploration with progression.&lt;/p&gt;</content><category term="Devlog"></category><category term="Crystal Caverns"></category></entry><entry><title>Blog Reboot</title><link href="https://www.deengames.com/blog/2021/blog-reboot.html" rel="alternate"></link><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2021-03-18:/blog/2021/blog-reboot.html</id><summary type="html">&lt;p&gt;&lt;img src="https://i.imgur.com/7tmqvLl.jpeg" alt="sign that says: changes ahead" /&gt;&lt;/p&gt;
&lt;p&gt;Hello! Long-time readers of this blog may notice a couple of changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new, mobile-responsive theme&lt;/li&gt;
&lt;li&gt;A complete restructuring of content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to redo the blog to make it mobile-friendly, and to hange the content - instead of game development notes and game design articles, instead, I plan to focus …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://i.imgur.com/7tmqvLl.jpeg" alt="sign that says: changes ahead" /&gt;&lt;/p&gt;
&lt;p&gt;Hello! Long-time readers of this blog may notice a couple of changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new, mobile-responsive theme&lt;/li&gt;
&lt;li&gt;A complete restructuring of content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to redo the blog to make it mobile-friendly, and to hange the content - instead of game development notes and game design articles, instead, I plan to focus on my games.&lt;/p&gt;
&lt;p&gt;What can you expect going forward? Weekly posts show-casing the best of whatever current project I'm working on.&lt;/p&gt;
&lt;p&gt;Old articles will stay available for a while.&lt;/p&gt;</content><category term="News"></category></entry><entry><title>Web Application Translation Architecture in .NET</title><link href="https://www.deengames.com/blog/2020/web-application-translation-architecture-in-net.html" rel="alternate"></link><published>2020-08-11T00:00:00-04:00</published><updated>2020-08-11T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2020-08-11:/blog/2020/web-application-translation-architecture-in-net.html</id><summary type="html">&lt;p&gt;&lt;img alt="globe of languages" src="https://i.imgur.com/bqyLzs1.png?1"&gt;&lt;/p&gt;
&lt;p&gt;So you want to localize and internationalize your web application? There are a lot of considerations, but here, we briefly discuss just the translation part.&lt;/p&gt;
&lt;p&gt;This post covers a couple of the architectural/design options and discusses their respective trade-offs. While this is a bit specific to .NET, other languages …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="globe of languages" src="https://i.imgur.com/bqyLzs1.png?1"&gt;&lt;/p&gt;
&lt;p&gt;So you want to localize and internationalize your web application? There are a lot of considerations, but here, we briefly discuss just the translation part.&lt;/p&gt;
&lt;p&gt;This post covers a couple of the architectural/design options and discusses their respective trade-offs. While this is a bit specific to .NET, other languages no doubt provide similar concepts, with various levels of API support (e.g. language stored in cookies)&lt;/p&gt;
&lt;h1&gt;Individual Translations via RESX Files&lt;/h1&gt;
&lt;p&gt;.NET and .NET Core provide some infrastructure called "resource files" (&lt;code&gt;.resx&lt;/code&gt;) extension). These are XML files which you can edit directly in Visual Studio; at runtime, they compile down to a binary format. They generally recommend creating a few resource files (one per back-end controller or shared module). Advantages of this approach include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy editing of the file (in-IDE)&lt;/li&gt;
&lt;li&gt;Easy versioning/history of the file (it's a text format)&lt;/li&gt;
&lt;li&gt;API support for configuring the prefered language in a cookie, etc.&lt;/li&gt;
&lt;li&gt;Localized changes on translation change (no need to re-test everything)&lt;/li&gt;
&lt;li&gt;Efficient, with a small size at runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The disadvantages of this format include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any translation change requires recompiling the entire application&lt;/li&gt;
&lt;li&gt;Editing dozens of files can be very cumbersome&lt;/li&gt;
&lt;li&gt;Difficult to make a translation change and see it immediately in-app (unless you're a developer)&lt;/li&gt;
&lt;li&gt;You can't store any sort of metadata (e.g. notes) with translations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I think this approach works well if you plan to update translations periodically and don't need an external translater. (If you do, and they're not a coder, you'll need to make additional tooling to export/import the strings in a format they can understand.)&lt;/p&gt;
&lt;h1&gt;Using a Database for Translations&lt;/h1&gt;
&lt;p&gt;One common alternative approach is to store the translations in a database (relational or otherwise) and simply load/display them at runtime. This confers some additional advantages over resource files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to update a translation and instantly see the change in-app&lt;/li&gt;
&lt;li&gt;Ability to store meta-data (like notes) with each message&lt;/li&gt;
&lt;li&gt;You can quickly query to find missing strings in various languages&lt;/li&gt;
&lt;li&gt;Non-technical users can easily edit translations via a simple web UI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, it contains some additional downsides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to write a web UI to allow translators to be able to view/update translations&lt;/li&gt;
&lt;li&gt;Making several database calls just to load one view/page, can be costly in terms of performance&lt;/li&gt;
&lt;li&gt;You can read/cache strings in memory on app-start, but then your app requires additional memory per language&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think this approach suits situations where you absolutely must be able to see updated translations reflected immediately, or where you have non-technical translators who need an easy way to be able to update translations.&lt;/p&gt;
&lt;p&gt;If you know of any other architectures/designs, drop me a note &lt;a href="https://twitter.com/nightblade99"&gt;on Twitter&lt;/a&gt; and let me know!&lt;/p&gt;</content><category term="Web Development"></category><category term=".NET Core"></category><category term="Architecture"></category></entry><entry><title>Thoroughly Testing Your Game</title><link href="https://www.deengames.com/blog/2020/thoroughly-testing-your-game.html" rel="alternate"></link><published>2020-07-07T00:00:00-04:00</published><updated>2020-07-07T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2020-07-07:/blog/2020/thoroughly-testing-your-game.html</id><summary type="html">&lt;p&gt;&lt;img alt="2 unit tests, 0 integration tests" src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fimg.devrant.com%2Fdevrant%2Frant%2Fr_519301_QxQcw.gif&amp;amp;f=1&amp;amp;nofb=1"&gt;&lt;/p&gt;
&lt;h1&gt;Why Test?&lt;/h1&gt;
&lt;p&gt;Of all the fun, interesting, exciting game development topics I could write about, I chose: testing.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Because testing is &lt;em&gt;essential&lt;/em&gt; to shipping your game without bugs and without hours upon hours of manual effort. As we'll see shortly, there are well-known patterns and practices you can apply …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="2 unit tests, 0 integration tests" src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fimg.devrant.com%2Fdevrant%2Frant%2Fr_519301_QxQcw.gif&amp;amp;f=1&amp;amp;nofb=1"&gt;&lt;/p&gt;
&lt;h1&gt;Why Test?&lt;/h1&gt;
&lt;p&gt;Of all the fun, interesting, exciting game development topics I could write about, I chose: testing.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Because testing is &lt;em&gt;essential&lt;/em&gt; to shipping your game without bugs and without hours upon hours of manual effort. As we'll see shortly, there are well-known patterns and practices you can apply; some generic to softwre testing, and some specific to game testing. &lt;/p&gt;
&lt;p&gt;I discovered these practices after working more then a decade as a professional software developer, and applying them on and off for a decade as a hobbyist game developer. They take time, yes. They work, often and they're better (faster, more reliable, consistent) than manual testing.&lt;/p&gt;
&lt;h1&gt;Overall Strategy&lt;/h1&gt;
&lt;p&gt;Your goal with software testing is to release your game at the highest possible quality: that means NO BUGS! Everything should work the way the designers intended, &lt;em&gt;without&lt;/em&gt; us spending tons of manual hours play-testing the same parts over and over and over (yawn).&lt;/p&gt;
&lt;p&gt;Your overall strategy needs to include the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unit Testing:&lt;/strong&gt; So you know your methods/classes/scripts/objects work at a granular level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System Testing:&lt;/strong&gt; Make sure cross-object workflows succeed, like "user last-shots an enemy and gets bonus gold." Sometimes called integration testing, functional testing, or end-to-end testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regression Testing:&lt;/strong&gt; Every bug you find and catch should be exploited by a unit test. If that test passes, it guarantees the bugs won't repeat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exploratory Testing:&lt;/strong&gt; There's no substitute for playing your game and trying weird stuff. You'll find quirks and things that your automated tests won't catch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Without these fundamentals, be prepared for lots of bugs and poor game reviews! Above and beyond them, depending on your available time, skill, and interest, you may benefit from additional categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Balancing:&lt;/strong&gt; Write tests that make sure the game is balanced, e.g. each class has roughly the same DPS, or that dungeons generate with roughly the right progressive difficulty&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance or Crash Testing:&lt;/strong&gt; Running previously-problematic code and making sure it's fast or doesn't crash. This includes running your game overnight to see if bad things happen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can't reasonably explain all those topics in a suitable depth without writing an essay, but get in touch with me if you would like more information on these topics.&lt;/p&gt;
&lt;h1&gt;Testing Process&lt;/h1&gt;
&lt;p&gt;Regardless of how little or how much you utilize the above categories of testing, you &lt;em&gt;need&lt;/em&gt; to properly test your game whenever you make a change. Properly means: sufficiently testing those areas that &lt;em&gt;may&lt;/em&gt; be affected, to make sure they still work as expected.&lt;/p&gt;
&lt;p&gt;After all, global variables are still a thing. Singletons can easily be accessed from anywhere. Highly-coupled code is common in (and out) of games. You need to make sure you didn't break stuff by mistake.&lt;/p&gt;
&lt;p&gt;How? Simple; but it all depends on two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a continuous integration setup which builds on every commit&lt;/li&gt;
&lt;li&gt;You have a way of producing a final kit (installer, standalone executable, etc.) that you're going to ship&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's start with baby steps. Whenever you make a code change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write unit tests&lt;/li&gt;
&lt;li&gt;Run all unit tests continuously (before you check in)&lt;/li&gt;
&lt;li&gt;Have a continuous integration solution (e.g. Jenkins, Travis-CI) build your code and run tests every commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes sure your code works (very granularly, at a class/scene/script method) and that you didn't break anything in an unrelated area. Good unit testing usually uncovers bugs (while you're writing the test code). They run fast (sub-second), so you can test lots of things quickly.&lt;/p&gt;
&lt;p&gt;If you have integration/functional/system tests, they're usually slower (seconds each), but highly valuable, since they're like a mini version of your game in some scenario/situation. Run those as part of the build, too.&lt;/p&gt;
&lt;p&gt;After the build runs, it generates a playable binary of some sort. Against this, you want to properly test the new feature/change/fix you just added. Like, &lt;em&gt;properly&lt;/em&gt;, including things leading up to it and things after it should have happened.&lt;/p&gt;
&lt;p&gt;With this done, you can be reasonably sure your game works, assuming you have good coverage of unit, regression, and system tests. You may want to run some exploratory tests: mess around and see if you can find anything or break anything.&lt;/p&gt;
&lt;h1&gt;Release-Time Testing Process&lt;/h1&gt;
&lt;p&gt;Your game is done, hurray! Congratulations! Now, the fun part: testing your game before you ship it. Since you have a robust build system in place, take the binaries from a passing build, and test it.&lt;/p&gt;
&lt;p&gt;The best way to know if your game is likely ready, is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Play it from beginning to end&lt;/li&gt;
&lt;li&gt;Stop and fix any bugs you find, verifying them through the build binaries&lt;/li&gt;
&lt;li&gt;Depending on the game length, either start over, or finish the run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Repeat this until you can complete the game without finding anything to fix.&lt;/p&gt;
&lt;p&gt;Also, when you find a bug, you don't need to re-test &lt;em&gt;everything&lt;/em&gt;; you can re-test &lt;em&gt;just&lt;/em&gt; the affected area (e.g. inventory management) and any other areas that might be affected because of shared/common/global code (e.g. item crafting).&lt;/p&gt;
&lt;h1&gt;Balancing, Performance and Crash Testing&lt;/h1&gt;
&lt;p&gt;If you write tests for balancing (make sure monsters, or skills, or levels, etc. are balanced with respect to each other), performance (make sure a certain part of the game runs fast enough), or crash (exercise a workflow and check it doesn't crash) testing, you can run them as little or as much as you like.&lt;/p&gt;
&lt;p&gt;I recommend running them at least weekly or per-sprint, to make sure nothing broke unexpectedly. If you have a good CI system and don't mind longer test runs, you can run them as part of the CI.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Testing is expensive! It takes time and effort! Write tests, debug tests, update tests! Anyone who tried this process will likely tell you &lt;em&gt;it's worth it&lt;/em&gt;. The pay-off of pressing a button or pushing a commit, and having &lt;em&gt;confidence&lt;/em&gt; that your game works, in every way you tested, is well worth the effort.&lt;/p&gt;
&lt;p&gt;Don't be daunted. Take baby steps. Practice. Ask questions. Try to add a bit more to each new project you start, so you can eventually master all these skills. They take time.&lt;/p&gt;
&lt;p&gt;If you ever want a second opinion or sounding board, or have questions or comments, feel free to reach out to me &lt;a href="https://twitter.com/nightblade99"&gt;on Twitter&lt;/a&gt; or &lt;a href="https://discord.gg/frKXYtG"&gt;Discord&lt;/a&gt;.&lt;/p&gt;</content><category term="Game Development"></category></entry><entry><title>A Primer on AABB Collision Resolution</title><link href="https://www.deengames.com/blog/2020/a-primer-on-aabb-collision-resolution.html" rel="alternate"></link><published>2020-01-30T00:00:00-05:00</published><updated>2020-01-30T00:00:00-05:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2020-01-30:/blog/2020/a-primer-on-aabb-collision-resolution.html</id><summary type="html">&lt;p&gt;&lt;img alt="video demo" src="https://i.imgur.com/GLQzqUP.gif"&gt;&lt;/p&gt;
&lt;p&gt;This blog post includes a discussion about AABB collision resolution: what it is and isn't, it's strengths and weaknesses, some common pitfalls, and how you can (hopefully) implement it in your low-level gaming tool of choice, if needed.&lt;/p&gt;
&lt;p&gt;I learned all this (the second time) as part of adding fast …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="video demo" src="https://i.imgur.com/GLQzqUP.gif"&gt;&lt;/p&gt;
&lt;p&gt;This blog post includes a discussion about AABB collision resolution: what it is and isn't, it's strengths and weaknesses, some common pitfalls, and how you can (hopefully) implement it in your low-level gaming tool of choice, if needed.&lt;/p&gt;
&lt;p&gt;I learned all this (the second time) as part of adding fast/stable collision resolution to &lt;a href="https://nightblade9.github.io/puffin"&gt;Puffin&lt;/a&gt;, a fast, lightweight 2D game engine built on top of MonoGame.&lt;/p&gt;
&lt;h2&gt;AABB, Collision Detection, and Collision Resolution&lt;/h2&gt;
&lt;p&gt;Some quick definitions to start:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AABB (Axis Aligned Bounding Boxes) means two non-rotated boxes, that are aligned on one axis. In 2D, everything on the same "layer" or "z" is on the same axis; in 3D, it means your boxes are on the same plane.&lt;/li&gt;
&lt;li&gt;Collsiion detection means detecting if there is a collision (two AABBs overlapping) or will be a collision (eg. in 0.3s these two will start colliding).&lt;/li&gt;
&lt;li&gt;Collision resolution means resolving the collision. Broadly, there are two approaches to this: prevention or pre-collision resolution (stop just at the onset of collision when the two AABBs touch), and post-collision resolution (once two AABBs overlap, move them backward in time until they no longer overlap).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My approach to AABB uses pre-collision resolution, because it tends to be less complex and more stable.&lt;/p&gt;
&lt;h2&gt;Pros and Cons of AABB&lt;/h2&gt;
&lt;p&gt;Why should you use AABB collision resolution? There are many other options, such as collision points, sphere/line collsion algorithms, polygons, etc.&lt;/p&gt;
&lt;p&gt;The strengths of AABB include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It works well in most cases. Most games can do well enough with just bounding boxes on their entities.&lt;/li&gt;
&lt;li&gt;It's relatively simple to code (math-wise), because it's just boxes.&lt;/li&gt;
&lt;li&gt;It's quite cheap computationally (eg. doesn't have an expensive square-root calculation, unlike spherical checks)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, it includes some drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It doesn't work with rotated boxes&lt;/li&gt;
&lt;li&gt;It doesn't work well with non-box shapes&lt;/li&gt;
&lt;li&gt;It requires extra work for it to work well with multi-entity collisions&lt;/li&gt;
&lt;li&gt;It's succeptible to "tunnelling" (high-speed objects move through solid objects because of their velocity)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you can live with those limitations, I recommend AABB, primarily because it is computationally cheap (works well with a high number of colliding entities).&lt;/p&gt;
&lt;h2&gt;Collision Resolution is Complex, like Physics&lt;/h2&gt;
&lt;p&gt;While AABB collision resolution is &lt;em&gt;relatively&lt;/em&gt; easier to code, it doesn't mean it's &lt;em&gt;easy&lt;/em&gt; to code. Many game frameworks don't include collision resolution, because this is part of the physics engine.&lt;/p&gt;
&lt;p&gt;Read that again: it's often part of the &lt;em&gt;physics engine&lt;/em&gt;. Physics engines are notoriously difficult to get right, and require lots of fiddling and corner-case evaluation. Even high-quality physics engines have limitations, such as tunneling.&lt;/p&gt;
&lt;p&gt;It took me around 10 hours to discover all the caveats and get this to work right. And it works well, including with multi-entity collisions. Test thoroughly.&lt;/p&gt;
&lt;p&gt;That said, my implementation includes a few bonus features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's resistant to collision tunneling (but not impervious)&lt;/li&gt;
&lt;li&gt;It works with multiple objects colliding at the same time&lt;/li&gt;
&lt;li&gt;It allows an object to optionally "collide and slide" along the object it collides with&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that out of the way, let's dive into the actual theory of how to make a stable AABB resolution, and then some code.&lt;/p&gt;
&lt;h2&gt;High-Level Description of AABB&lt;/h2&gt;
&lt;p&gt;AABB collision resolution works by looking at the X and Y component resolutions of your velocity. Simply put:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider the intended destination of your moving entity (where it will be after updating its position, not where it is now)&lt;/li&gt;
&lt;li&gt;Look at the distance &lt;code&gt;dx&lt;/code&gt; to travel before we collide on the X-axis and &lt;code&gt;dy&lt;/code&gt; for the Y-axis&lt;/li&gt;
&lt;li&gt;Divide these by your component X-velocity and Y-velocity respectively (&lt;code&gt;vx&lt;/code&gt; and &lt;code&gt;vy&lt;/code&gt;) to figure out how long before each axis collision takes place (&lt;code&gt;tx&lt;/code&gt; and &lt;code&gt;ty&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Resolve the collision on the axis that collides first&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AABB sweep test with velocity" src="https://i.imgur.com/gCtzUeJ.png"&gt;&lt;/p&gt;
&lt;p&gt;This excellent diagram (credit: LaroLaro on &lt;a href="https://gamedev.stackexchange.com/questions/28577/2d-aabb-vs-aabb-sweep-how-to-calculate-hit-normal"&gt;GameDev.SE&lt;/a&gt;) shows a moving object (A) that will collide with a second object (B). Based on the component velocities, you can see from the projected A box that the faster collision will be on the Y-axis first.&lt;/p&gt;
&lt;p&gt;Because collision resolution takes place on a single axis at a time, you may end up having to resolve the same collision multiple times to get a stable resolution. I find that running the collision resolution twice suffices.&lt;/p&gt;
&lt;h2&gt;And Now, the Code&lt;/h2&gt;
&lt;p&gt;Below, I discuss some pseudocode that's almost the same as the actual (C#) code from Puffin. The same code can apply to any programming language or framework.&lt;/p&gt;
&lt;p&gt;One unorthodox implementation detail I used: when each entity moves, I make a note of their "intended" destination X/Y. If that location would cause it to collide inside an object, I instead update it so it stops just at the point of collision.  In my pseudocode below, you'll see this as &lt;code&gt;intendedX&lt;/code&gt; and &lt;code&gt;intendedY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For every collidable entity, you're going to compare it to every other collidable entity. Since we're using AABBs, this is pretty simple: just compare the coordinates plus intended movement of the moving entity, against the entity that isn't moving:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;isAabbCollision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Adapted from https://tutorialedge.net/gamedev/aabb-collision-detection-tutorial/&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You simply call this with &lt;code&gt;e1.x + e1.velocity.x, e1.y + e1.velocity.y, e1.width, e1.height, e2.x, e2.y, e2.width, e2.height&lt;/code&gt; and it will return if they collide or not.&lt;/p&gt;
&lt;p&gt;However, to stop at the point of collision, we need to consider our entity's velocity: if it's moving right, then the distance to collide on the X-axis is the right edge of &lt;code&gt;e1&lt;/code&gt; compared to the left-edge of &lt;code&gt;e2&lt;/code&gt;. If it's moving left, then vice-versa (left edge of &lt;code&gt;e1&lt;/code&gt; vs. the right edge of &lt;code&gt;e2&lt;/code&gt;). The same thing applies when we resolve on the Y-axis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Assuming we have two AABBs, what&amp;#39;s the actual distance between them?&lt;/span&gt;
&lt;span class="c1"&gt;// eg. if `e1` is on the left of `e2`, we want `dx` to be `e2.left - e1.right`.&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;static&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;CalculateAabbDistanceTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, for every collidable entity, if it results in an AABB collision with another collidable entity, we figure out which axis collides first, based on which one collides first time-wise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Another entity occupies that space. Use separating axis theorem (SAT)&lt;/span&gt;
&lt;span class="c1"&gt;// to see how much we can move, and then move accordingly, resolving at whichever&lt;/span&gt;
&lt;span class="c1"&gt;// axis collides first by time (not whichever one is the smallest diff).&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;xDistance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;yDistance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CalculateAabbDistanceTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;xVelocity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;yVelocity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VelocityX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VelocityY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;xAxisTimeToCollide&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xVelocity&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xDistance&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;xVelocity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;yAxisTimeToCollide&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yVelocity&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yDistance&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;yVelocity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Resolving collision based on collision time solves some corner-cases where an object is very close to collision on one axis, but moving much faster on the other axis (eg. a player falling off a tall building moves into it, and instead of colliding against the side, he collides with the top).&lt;/p&gt;
&lt;p&gt;Once we know which collision is first, it's easy to resolve if the collision is only on one axis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xVelocity&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;yVelocity&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Colliison on X-axis only&lt;/span&gt;
    &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xAxisTimeToCollide&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaX&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;xVelocity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xVelocity&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;yVelocity&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Collision on Y-axis only&lt;/span&gt;
    &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yAxisTimeToCollide&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaY&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;yVelocity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, the most complex case: what do we do if the object would collide on both X- and Y-axes? We resolve the fastest collision first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Collision on X and Y axis (eg. slide up against a wall)&lt;/span&gt;
    &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xAxisTimeToCollide&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yAxisTimeToCollide&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaX&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;xVelocity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaY&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;yVelocity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Easy! If it would take 0.1s to collide on the X-axis, and 0.2 on the Y-axis, we increment the entity's X and Y by their velocity times 0.1 (the faster collision time).&lt;/p&gt;
&lt;p&gt;Finally, for stable resolutions, make sure you run the collision resolution twice per update. Since MonoGame-based frameworks give you the update time, simply run the update twice, with half of the elapsed time, each update:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;halfElapsed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMilliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elapsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TotalMilliseconds&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Resolve collisions twice to stabilize multi-collisions.&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProcessMovement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;halfElapsed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProcessMovement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;halfElapsed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's it, you're done!&lt;/p&gt;
&lt;h2&gt;Slide on Collide&lt;/h2&gt;
&lt;p&gt;With basic collision resolution out of the way, you might ask "how do I slide up against the target object instead of simply stopping abruptly?"&lt;/p&gt;
&lt;p&gt;The answer to that caused about 50% of my development time. The answer is "you collide as usual but then move on the other axis as much as is reasonable," where reasonable means "don't move so much you collide with something else." In this case, don't slide if doing so would land you in another AABB collision.&lt;/p&gt;
&lt;p&gt;Another complication I can't explain well is my need to refer to the "old" intended X/Y distances; I'm not 100% sure at this moment why I needed those, but those are needed for a proper resolution.&lt;/p&gt;
&lt;p&gt;Some code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlideOnCollide&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Setting oldIntendedX/oldIntendedY might put us directly inside another solid thing.&lt;/span&gt;
        &lt;span class="c1"&gt;// No worries, we resolve collisions twice, so the second iteration will catch it.&lt;/span&gt;

        &lt;span class="c1"&gt;// Resolved collision on the X-axis first&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;xAxisTimeToCollide&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Slide vertically&lt;/span&gt;
            &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaX&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// If we&amp;#39;re in a corner, don&amp;#39;t resolve incorrectly; move only if we&amp;#39;re clear on the Y-axis.&lt;/span&gt;
            &lt;span class="c1"&gt;// Fixes a bug where you  move a lot in the corner (left/right/left/right) and suddenly go through the wall. &lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;isAabbCollision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;oldIntendedY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;collideAgainst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collideAgainst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaY&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oldIntendedY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Resolved collision on the Y-axis first&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shortestTime&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;yAxisTimeToCollide&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Slide horizontally&lt;/span&gt;
            &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaY&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// If we&amp;#39;re in a corner, don&amp;#39;t resolve incorrectly; move only if we&amp;#39;re clear on the X-axis.&lt;/span&gt;
            &lt;span class="c1"&gt;// Fixes a bug where you  move a lot in the corner (left/right/left/right) and suddenly go through the wall.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;isAabbCollision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;oldIntendedX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;collideAgainst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collideAgainst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntendedMoveDeltaX&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oldIntendedX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Wrapping it All Up&lt;/h2&gt;
&lt;p&gt;That concludes a somewhat whirlwind tour of AABB collision detection. I hope you came out of it understanding the pros and cons, how to assess when you need it or not, and enough pseudo-code to actually get it working for you.&lt;/p&gt;
&lt;p&gt;I would love to hear from you! If you have any feedback, please drop me a message/tweet &lt;a href="https://twitter.com/nightblade99"&gt;on Twitter&lt;/a&gt;.&lt;/p&gt;</content><category term="Technical"></category><category term="Physics"></category></entry><entry><title>Integrating Religion Into Games</title><link href="https://www.deengames.com/blog/2019/integrating-religion-into-games.html" rel="alternate"></link><published>2019-10-30T00:00:00-04:00</published><updated>2019-10-30T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2019-10-30:/blog/2019/integrating-religion-into-games.html</id><summary type="html">&lt;p&gt;&lt;img src="https://i.imgur.com/qr8ljtY.jpg" alt="screenshot of a verse of Qur'an in Eman Quest" width="750" height="474" /&gt;&lt;/p&gt;
&lt;p&gt;I recently engaged in a conversation with someone about religion and games; specifically, about me showing, explaining, and playing the audio of verses of the Qur'an in my games. This discussion lead me to think about, question, evaluate, and eventually understand (at a deeper level) why I do this, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://i.imgur.com/qr8ljtY.jpg" alt="screenshot of a verse of Qur'an in Eman Quest" width="750" height="474" /&gt;&lt;/p&gt;
&lt;p&gt;I recently engaged in a conversation with someone about religion and games; specifically, about me showing, explaining, and playing the audio of verses of the Qur'an in my games. This discussion lead me to think about, question, evaluate, and eventually understand (at a deeper level) why I do this, and why I included that section in that game.&lt;/p&gt;
&lt;p&gt;To summarize: I think the use of religion (specifically, elements of Islam and Muslim culture) in games is essential for many reasons, including breaking stereotypes and building a deeper understanding of what Islam's canonical texts really mean. In fact, the word "deen" in "Deen Games" means religion, but it also means "a way of life."&lt;/p&gt;
&lt;h2&gt;Why Integrate Religion Into Games?&lt;/h2&gt;
&lt;p&gt;So, the core issue: why bother mixing religion with games? Certainly, this is not something people ask for (barring a very narrow definition of "game" and focusing on educational aspects, usually in the form of quizzes).&lt;/p&gt;
&lt;p&gt;Some thoughts that come to mind:
- Religion, in general, is something that is often looked down upon as "backward," "violent," and not useful.
- Religion in games, is seen as almost a taboo; something people just don't do.
- In the past, some people have made thinly-veiled religious propaganda as games&lt;/p&gt;
&lt;p&gt;In particular, if you look at the demographic of Muslims, it paints a similarly bleak picture:
- Muslims are often portrayed as terrorists, oppressors, and backward in media
- Games are no better - Muslims commonly appear as the antagonists in first-person shooters, supplanting Nazis&lt;/p&gt;
&lt;p&gt;Knowing all this, a not-so-obvious solution becomes obvious: why not use games to counter the negativity and stereotypes around religion and Islam in particular? Games reach around the world, but can uniquely engage players interactively; can create fantsatic scenarios that don't exist outside; and can cast players in the role of those they wouldn't normally choose to be. Games can show an alternative view, and potentially build empathy for marginalized groups. (In fact, some ideologies already use games to achieve all these goals.)&lt;/p&gt;
&lt;p&gt;That brings us back to Deen Games. Our mission is not to create religious propaganda or poorly-disguised quizzes. We actively work to create fun, innovative, unique, accessible games that include Muslim culture, history, and beliefs as an integral part of the game universe.&lt;/p&gt;
&lt;p&gt;As one person &lt;a href="https://twitter.com/bcscarbrough/status/1188791237089857537"&gt;aptly tweeted&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your beliefs do not bleed into your creative process on some level, they are not your beliefs. I expect a game made by Muslims to have some aspects of their beliefs even if they're not overt. Scrubbing games of every hint of a belief system to avoid offense is imo offensive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;What we can Learn from Islamic Games&lt;/h2&gt;
&lt;p&gt;&lt;img alt="data cube in Ali the Android which references a verse of Qur'an" src="https://i.imgur.com/v15ki7y.png"&gt;&lt;/p&gt;
&lt;p&gt;My specific interest within Islamic games is to create games that leave the player with an understanding and practical application of canonical texts of Islam through games. Because games allow us to create arbitrary fantastical scenarios and situations (fantasy and sci-fi in particular), this provides us a rich, fertile ground for creative expression and building a real understanding.&lt;/p&gt;
&lt;p&gt;Creating Islamic games with visibly Muslim characters not only breaks stereotypes, but it also normalizes us in popular culture, contrary to how we're often portrayed in media.&lt;/p&gt;
&lt;p&gt;It also confers an additional benefit: it allows us to easily break the common tropes/stereotypes of games. For example, a fantasy game &lt;a href="https://deengames.itch.io/eman-quest"&gt;like Eman Quest&lt;/a&gt; might contain slimes, bats, sentient rocks; but also jinns and other creatures/elements drawn from our Islamic theology and history.&lt;/p&gt;
&lt;h2&gt;It's a Trade-Off Though&lt;/h2&gt;
&lt;p&gt;Like choosing a pixel-art or low-poly aesthetic to your game, choosing to include Islamic elements comes with some down-sides. I expect the benefits to (greatly) overwhelm the downsides, which include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This can break immersion. In particular, the Islamic content must be well-integrated into world lore.&lt;/li&gt;
&lt;li&gt;It doesn't appeal to everyone. A rather vocal group exists decrying religion in games. Even Nintendo &lt;a href="http://www.escapistmagazine.com/articles/view/features/15045-Nintendo-of-America-Used-Religious-Censorship-to-Avoid-Controver"&gt;has a history&lt;/a&gt; of &lt;a href="https://kotaku.com/losing-our-religion-5509744"&gt;removing religious elements&lt;/a&gt; from &lt;a href="https://en.wikipedia.org/wiki/ActRaiser#Religious_subtext"&gt;various games&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It takes practice to integrate religious identity and iconography and beliefs in games - especially if you don't want a very superficial integration.&lt;/li&gt;
&lt;li&gt;Not every religious quote, source, message, symbol, etc. can or should be integrated into games.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;Thanks for taking the time to read this! I highly encourage you to &lt;a href="https://twitter.com/nightblade99"&gt;drop me some comments on Twitter&lt;/a&gt; and let me know your thoughts.&lt;/p&gt;
&lt;p&gt;Or, if you feel up to it, why not include a visibly Islamic element/character/outfit in your next game? I would be happy to work with you on this to define something you feel happy about including in your games.&lt;/p&gt;</content><category term="Game Development"></category></entry><entry><title>Eman Quest Retrospective</title><link href="https://www.deengames.com/blog/2019/eman-quest-retrospective.html" rel="alternate"></link><published>2019-08-22T00:00:00-04:00</published><updated>2019-08-22T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2019-08-22:/blog/2019/eman-quest-retrospective.html</id><summary type="html">&lt;p&gt;&lt;img src="https://i.imgur.com/rpSFnxr.png" alt="screenshot of the protagonist in a cave map" width="750" height="450" /&gt;&lt;/p&gt;
&lt;p&gt;Welcome to the rather large retrospective on &lt;a href="https://deengames.itch.io/eman-quest"&gt;Eman Quest&lt;/a&gt;. Eman Quest, if you haven't heard about it, is a "procedurally-generated mini-RPG with memory mechanics." You can try the full game, for free, on Itch.&lt;/p&gt;
&lt;p&gt;This retrospective covers two parts: first, the overall idea (what did I plan to achieve? What …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://i.imgur.com/rpSFnxr.png" alt="screenshot of the protagonist in a cave map" width="750" height="450" /&gt;&lt;/p&gt;
&lt;p&gt;Welcome to the rather large retrospective on &lt;a href="https://deengames.itch.io/eman-quest"&gt;Eman Quest&lt;/a&gt;. Eman Quest, if you haven't heard about it, is a "procedurally-generated mini-RPG with memory mechanics." You can try the full game, for free, on Itch.&lt;/p&gt;
&lt;p&gt;This retrospective covers two parts: first, the overall idea (what did I plan to achieve? What did I actually achieve? Reflections), and the key lessons learned (mostly specific to Godot).&lt;/p&gt;
&lt;h1&gt;The Overall Idea: A Procedurally-Generated RPG&lt;/h1&gt;
&lt;p&gt;I really like procedural content generation (in general), although it's deceptively difficult to implement correctly (corner cases really get you). I always wanted to make a "procedurally-generated Chrono Trigger-like RPG," although that's a huge undertaking; Eman Quest was the first step: creating a small, "lightweight" or "mini" RPG.&lt;/p&gt;
&lt;p&gt;What, exactly, did I include in Eman Quest?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A fixed story about life, faith, and family&lt;/li&gt;
&lt;li&gt;Seven different areas; these are three geographies (forest, cave, and dungeon) each with multiple biomes (frost forest, death forest, desert dungeon, etc.)&lt;/li&gt;
&lt;li&gt;A unique world: each time you play a new game, it picks three out of seven biomes, and generates the required maps for each.&lt;/li&gt;
&lt;li&gt;Unique enemies, two per area, statically-generated and balanced with careful trade-offs (eg. glass cannon, tank), and a unique boss per biome.&lt;/li&gt;
&lt;li&gt;Procedurally-generated equipment (weapons, armour), including their stats&lt;/li&gt;
&lt;li&gt;A battle system that relies on not puzzle/thinking or skills/reflexes, but memory: remember the selected tiles, pick them to get action points, chain them to get tech points, and then use them for your turn.&lt;/li&gt;
&lt;li&gt;Two fixed skills in battle&lt;/li&gt;
&lt;li&gt;A progression system with experience, levels, and stats points you can distribute to your liking (respeccing is free).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/2bx1y6M.gif" alt="one round of battle" width="750" height="450" /&gt;&lt;/p&gt;
&lt;p&gt;I didn't include many things in Eman Quest; specifically, I analyzed Bastion, how they cut corners to cut down on the amount of content they needed to complete the game, and applied it to my game. Specificially:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I scrapped procedural story-, world-, event-, and character-creation, and wrote a fixed story instead&lt;/li&gt;
&lt;li&gt;I scrapped the world map, because it adds little or no value&lt;/li&gt;
&lt;li&gt;I didn't incude any NPCs or shops, because those require a lot of art/coding. (You always find better equipment in chests than what you're using.)&lt;/li&gt;
&lt;li&gt;I cut a few things in content: avatars, some biome variants (crystal caves), variant bosses, and unique final-boss skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What Went Well&lt;/h1&gt;
&lt;p&gt;Overall, I am very happy with the result, and thankful that I could finish this project, although it doesn't come quite close to my initial vision (due to scope cuts and resource/time constraints).&lt;/p&gt;
&lt;p&gt;Things I really like about Eman Quest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It "feels" like a procedurally-generated RPG.&lt;/li&gt;
&lt;li&gt;It's balanced (monsters seem quite distinct/different to fight) even though it's on the easy side&lt;/li&gt;
&lt;li&gt;Quite a few people completed the game&lt;/li&gt;
&lt;li&gt;The memory mechanics received some compliments (more on the design below)&lt;/li&gt;
&lt;li&gt;I shipped. Especially considering I tend to abandon long-running projects, this is especially important to me&lt;/li&gt;
&lt;li&gt;I polished the game considerably, including audio (background and sound-effects)&lt;/li&gt;
&lt;li&gt;I received some fan-art, and several questions about my protagonist; which prompted me to create an elaborate background, and a character representing many minorities: a strong woman, a Muslim, and an African&lt;/li&gt;
&lt;li&gt;I represented Muslims and Islam positively, and communicated one of our values (good treatment of parents)&lt;/li&gt;
&lt;li&gt;I learned a lot about game accessibility, and added a few accessibility options into my game&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below, you can see the fan-art of the protagonist, Aisha.&lt;/p&gt;
&lt;p&gt;As my first full Godot project, I'm not really proud of the code quality; as I joked on &lt;a href="https://discord.gg/frKXYtG"&gt;my Discord server&lt;/a&gt;, code quality decreases as you get closer to production!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/LeKMWbk.jpg" width="600" height="570" /&gt;&lt;/p&gt;
&lt;h2&gt;Memory Mechanics&lt;/h2&gt;
&lt;p&gt;&lt;img alt="memory mechanics screenshot" src="https://i.imgur.com/xOOetlV.png"&gt;&lt;/p&gt;
&lt;p&gt;Aside from the technical challenge of creating a procedural RPG, I challenged myself to create a fun battle mechanic based on memory instead of reflexes or puzzles.  I also received lots of good feedback about this from users, who praised the memory mechanic as interesting.&lt;/p&gt;
&lt;p&gt;The core mechanic works simply: a 5x5 grid appears, some squares highlight for a fractional second, and then disappear. You need to click on those highlighted tiles to accumulate "action points," which you can use for different actions (attack costs 2, critical costs 3, and defend/heal costs 1).&lt;/p&gt;
&lt;p&gt;In initial prototypes, I experimented with requiring players to pick both energy (action poinst) and actions they wanted to play. This proved to be quite "stressful," because you have a fractional second to look for both required energy tiles and action tiles; midway through development, I streamlined it into what it is now.  I also tried several variations (incluiding a "simon says" type mini-game and a stream of "which of these items did you never see before"), both of which didn't seem fun enough to include in the final.&lt;/p&gt;
&lt;p&gt;I also found that battles become somewhat rote and mechanical/deterministic after a while: you pick the five specified tiles, then pick crit, attack, and repeat, healing as necessary.  To change it up, and to reward skillful play, I added techniques/skills and technical points.&lt;/p&gt;
&lt;p&gt;Players who pick three or more tiles correctly in a row (with no mistakes) acquire tech points. If you select all five tiles correctly, you get a total of three tech points. You can save these up and use either five or seven for stun/vampire skills respectively. This adds an element of strategy and non-determinism.  Tech poinst also persist across battles, adding another dimension of planning.&lt;/p&gt;
&lt;h1&gt;What Didn't Go Well + Key Insights&lt;/h1&gt;
&lt;p&gt;I initially planned one month to complete the project; it ended up taking around nine months. Why? Many reasons, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I realized early on that different forests just didn't cut it, and needed both variation (styles of forests) and map types (cave, dungeon, etc.)&lt;/li&gt;
&lt;li&gt;Creating art was not my strong-suite, and I needed three distinct tilesets, each with two unique variations&lt;/li&gt;
&lt;li&gt;Finding, drawing and animating 14 monsters, and their walk cycles, took a lot of effort; even though I found many of the base sprites and received lots of help on the art side.&lt;/li&gt;
&lt;li&gt;I added the story about five months in, and required implementing an entire message dialog system, key-item system, final-game events, and lots of unexpected things.&lt;/li&gt;
&lt;li&gt;Technical struggles with, and crashes in, Godot (more on that below).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ran into several difficulties along the way.  These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning Godot's API, which seemed quite foreign to me (anything is a scene and can contain sub-scenes). Also, Godot is quite a wide framework, and it takes time to discover/learn/use things (like UI components).&lt;/li&gt;
&lt;li&gt;Learning about Godot's automatic garbage-collection (&lt;code&gt;free&lt;/code&gt; and &lt;code&gt;queue_free&lt;/code&gt;) and how they destroy all objects when changing scenes. This caused me to rewrite my early version to completely separate data about maps (tiles, treasure, etc.) from the visual presentation of those, which got GCed.&lt;/li&gt;
&lt;li&gt;I wrote garbage, prototype-quality code throughout. This lead to numerous bugs (some difficult to diagnose and fix), and a cycle of "fix something but break something else" late in development. You can see tweets with some bugs, including a few hilarious ones, &lt;a href="https://twitter.com/search?q=%40nightblade99 %23EmanQuest %23Bugs"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I didn't write any unit or integration tests. This meant I could break things without noticing for days/weeks. I remedied this quite late in development by using GUT (Godot Unit Testing).&lt;/li&gt;
&lt;li&gt;Lack of CI. Unlike other, C#-based projects, I couldn't get Travis to run my tests; so if I forgot to run tests, broken things stay unnoticed.&lt;/li&gt;
&lt;li&gt;The final game crashed a lot, which caused a lot of stress and resulted in a lot of lessons; so I wrote a section just on that.&lt;/li&gt;
&lt;li&gt;Close to the end of development, I lost my GPU on my main development machine, and my main Windows installed contained drivers that didn't run with Godot 3.0.6. I ended up switching to Linux (which included up-to-date drivers), but lost of a lot of time; I also upgraded Godot to 3.1.1, which initially showed a problem with cave maps running at 2-3FPS, but works fine on Linux.&lt;/li&gt;
&lt;li&gt;Serialization for saving games. As &lt;a href="https://docs.godotengine.org/en/3.1/tutorials/io/saving_games.html"&gt;the Godot docs on saving games&lt;/a&gt; suggests, you need to &lt;em&gt;manually&lt;/em&gt; serialize all your (nested, hierarchial) data structures into JSON. This requires a lot of boilerplate, and it's very tedious (you may miss a field and not realize unless you test thoroughly).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Game Crashed on Release&lt;/h2&gt;
&lt;p&gt;When I released the game, it crashed. A lot. This undoubtedly resulted in a terrible first-impression, although I received several supportive comments such as "it crashed once and then I reloaded and it was fine" or "it keeps crashing after battles but I completed the game."&lt;/p&gt;
&lt;p&gt;Why did it crash, why didn't I notice, and how did I fix the crashes?  Well, I'm glad you asked.&lt;/p&gt;
&lt;p&gt;Godot runs the game in the editor, somewhat differently from when you export the final platform-specific release. This includes differences such as caring about case-sensitivity (which the Editor doesn't, on Windows), and - critically - crashing when you do Bad Things (like waiting for an event and disposing the scene before it comes back).&lt;/p&gt;
&lt;p&gt;I always tested Eman Quest from within the editor, so I never noticed (or cared to notice?) the errors. The game also crashed on Linux and (troublingly) MacOS (which I don't have hardware to test with), but not on Windows, so I failed to catch it in my pre-release testing.&lt;/p&gt;
&lt;p&gt;In the end, I upgraded Godot from 3.0.6 to 3.1.1 (someone commented that it didn't work with their graphics card, and 3.1.1 works with OpenGLES 3.1 and earlier), and the crashes disappeared.  I also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tested on Linux (after switching to Linux) and found I could reproduce, and fix, one crash&lt;/li&gt;
&lt;li&gt;Fixed sporadically-appearing errors that Godot printed out, which fixed at least one crash&lt;/li&gt;
&lt;li&gt;Received great offers of help from people on Twitter, specifically running MacOS, who found workflows in-game that reproduced the crash, and verified after I fixed them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Action Items&lt;/h1&gt;
&lt;p&gt;I learned several key lessons out of this. Learning about Godot itself proved invaluable; beyond that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Write clean code.&lt;/strong&gt; (Clean meaning, as good as you can make it.) This results in less bugs and less painful troubleshooting later on when things turn bad.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Export and test your project often.&lt;/strong&gt; This catches bugs, crashes, and all kinds of badness that you don't want players to find first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix all runtime errors, and any errors/warnings Godot generates.&lt;/strong&gt; These often foreshadow crashes when the game runs (sometimes, only on select platforms - Windows seems fairly resilient)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unit test everything.&lt;/strong&gt; Unit testing is cheap, runs quickly, and pays for itself in spades; you can quickly catch issues without manually retesting everything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set up a continuous integration pipeline to run your tests.&lt;/strong&gt; With GitHub and Travis, you can check in code, and get an email whenever you broke some tests (but didn't notice by running them manually). That can be invaluable to avoid breaking things that work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Godot community is awesome.&lt;/strong&gt; Ask on Discord, open a GitHub issue, post a tweet - there are experienced developers who will get back to you, promptly, with solid solutions. Just be careful what you ask for! (I upgraded to Godot 3.1.1  and needed to redo all my UI to fix a tiny bug with one slider.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always update to the latest version of Godot.&lt;/strong&gt; It really works better, and often clears up hard-to-fix bugs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make friends on Twitter.&lt;/strong&gt; You never know who will like, follow, comment, download your game, and - critically - help often comes from those who we least expect it from.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, I want to personally thank everyone who helped me with the project - you know who you are. Without your help, coaching, support, and mentorship, I would never actually finished the game.&lt;/p&gt;</content><category term="Retrospective"></category><category term="Godot"></category></entry><entry><title>Capture In-Game Screenshots in Godot</title><link href="https://www.deengames.com/blog/2019/capture-in-game-screenshots-in-godot.html" rel="alternate"></link><published>2019-06-11T00:00:00-04:00</published><updated>2019-06-11T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2019-06-11:/blog/2019/capture-in-game-screenshots-in-godot.html</id><summary type="html">&lt;p&gt;&lt;img alt="Animation of a game saving, with a screenshot appearing on the save screen" src="https://i.imgur.com/OlsyPli.gif"&gt;&lt;/p&gt;
&lt;p&gt;Godot allows you to capture in-game screen-shots, without the use of any plugins/addons. However, I couldn't find a complete, step-by-step guide to do this, without relying on any specific nodes being instantiated in your scene.&lt;/p&gt;
&lt;p&gt;You can follow these steps. I tested these on Godot 3.0.6. Some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Animation of a game saving, with a screenshot appearing on the save screen" src="https://i.imgur.com/OlsyPli.gif"&gt;&lt;/p&gt;
&lt;p&gt;Godot allows you to capture in-game screen-shots, without the use of any plugins/addons. However, I couldn't find a complete, step-by-step guide to do this, without relying on any specific nodes being instantiated in your scene.&lt;/p&gt;
&lt;p&gt;You can follow these steps. I tested these on Godot 3.0.6. Some of the code originated in a thread that mentioned that "you need this prior to Godot 3.1," but through testing, I eventually removed all unnecessary code. I can confirm that this sample works, because I implemented it in &lt;a href="https://twitter.com/search?q=%23EmanQuest"&gt;Eman Quest&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Saving Screenshots&lt;/h1&gt;
&lt;p&gt;Godot provides a rather straight-forward API for saving a screenshot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;screenshot_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;user://screenshot-test.png&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Retrieve&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;captured&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_tree&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;get_root&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;get_texture&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Flip&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;flipped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flip_y&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_png&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenshot_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This saves a screenshot into a file called &lt;code&gt;screenshot-test.png&lt;/code&gt;, under the user space; on Windows, that's something like &lt;code&gt;C:\Users\CURRENTLY_LOGGED_IN_USER\AppData\Roaming\Godot\app_userdata\Eman Quest\screenshot-save0.png&lt;/code&gt;, where &lt;code&gt;CURRENTLY_LOGGED_IN_USER&lt;/code&gt; is your user name (eg. &lt;code&gt;nightblade&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;Loading Screenshots&lt;/h1&gt;
&lt;p&gt;Loading screenshots proves more complicated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To load the data, you can use &lt;code&gt;image.load_png_from_buffer&lt;/code&gt;, but it takes a &lt;code&gt;PoolByteArray&lt;/code&gt; - not something you can load with a call to &lt;code&gt;preload("res://...")&lt;/code&gt;. This requires using the &lt;code&gt;File&lt;/code&gt; API.&lt;/li&gt;
&lt;li&gt;To set the texture onto a sprite, you cannot simply assign it to an &lt;code&gt;Image&lt;/code&gt; instance; instead, you need to create and initialize an &lt;code&gt;ImageTexture&lt;/code&gt; instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After we sort through these issues, we end up with code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;user://screenshot-test.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;READ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_len&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_png_from_buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;image_texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageTexture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;image_texture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_from_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_texture&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This loads the PNG file &lt;code&gt;screenshot-test.png&lt;/code&gt; from the user-space into an &lt;code&gt;Image&lt;/code&gt;, wraps it into an &lt;code&gt;ImageTexture&lt;/code&gt;, and assigns it to some &lt;code&gt;Sprite&lt;/code&gt; instance&lt;/p&gt;
&lt;h1&gt;Crop and Scale&lt;/h1&gt;
&lt;p&gt;Since we loaded our PNG into a &lt;code&gt;Sprite&lt;/code&gt;, we can execute other operations on it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can set the &lt;code&gt;region_rect&lt;/code&gt; properties (through code or through the editor) to crop the image&lt;/li&gt;
&lt;li&gt;You can set the &lt;code&gt;scale&lt;/code&gt; to create a thumbnail of the image&lt;/li&gt;
&lt;li&gt;You can apply effects, colourization, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This affords a lot of interesting use-cases, such as creating a thumbnail of the in-game screen per save-game (my personal use case).&lt;/p&gt;</content><category term="Technical"></category><category term="Godot"></category></entry><entry><title>Getting Started with Unit and Integration Testing in Godot</title><link href="https://www.deengames.com/blog/2019/getting-started-with-unit-and-integration-testing-in-godot.html" rel="alternate"></link><published>2019-05-13T00:00:00-04:00</published><updated>2019-05-13T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2019-05-13:/blog/2019/getting-started-with-unit-and-integration-testing-in-godot.html</id><summary type="html">&lt;p&gt;&lt;img alt="screenshot with code on top" src="https://i.imgur.com/F3hoasj.jpg"&gt;
(Image credit: &lt;a href="https://godotengine.org/article/tests-needed-godot-2-1-4-beta"&gt;Godot blog&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Godot affords the possibility of unit and integration testing &lt;code&gt;gdscript&lt;/code&gt; code via the GUT extension. If you're getting started with unit/integrated testing (collectively "automated testing") or Godot, and interested in what automated testing can do for you, read on.&lt;/p&gt;
&lt;h1&gt;What is Automated Testing and Why …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="screenshot with code on top" src="https://i.imgur.com/F3hoasj.jpg"&gt;
(Image credit: &lt;a href="https://godotengine.org/article/tests-needed-godot-2-1-4-beta"&gt;Godot blog&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Godot affords the possibility of unit and integration testing &lt;code&gt;gdscript&lt;/code&gt; code via the GUT extension. If you're getting started with unit/integrated testing (collectively "automated testing") or Godot, and interested in what automated testing can do for you, read on.&lt;/p&gt;
&lt;h1&gt;What is Automated Testing and Why do I Care?&lt;/h1&gt;
&lt;p&gt;Your game contains lots of logic. When you make changes, you need to re-test that everything that worked before, still works (nothing broke). As you find and fix bugs, and get into corner-cases of your game (eg. testing the entire play-through), manually re-testing everything becomes more and more time-consuming.&lt;/p&gt;
&lt;p&gt;Automated testing provides a solution to these problems: what if you could &lt;em&gt;write code&lt;/em&gt; that would test your game code? What if that code could run through all the necessary scenarios of your game in a matter of minutes, or seconds? What if you could run the tests after every single change, and be sure that you never broke anything?&lt;/p&gt;
&lt;p&gt;Automated testing provides exactly this benefit. You write test-code that tests your "production" code. Unit tests, which test very small levels of functionality, run in in a matter of milliseconds; integration tests, which typically test workflows (fight monster, get experience, level up, spend skill points) take longer, but allow you to automate workflows.&lt;/p&gt;
&lt;p&gt;Finally, any experienced developer with automated testing will agree: the &lt;em&gt;mindset change&lt;/em&gt; you get from automated testing is unparalleled. Not only can you test &lt;em&gt;every single line of code&lt;/em&gt; you change, making sure it works, but you can also make bigger, riskier changes, because of your safety-net of unit tests. You can actually go faster, and make bigger changes, with your safety net of automated tests.&lt;/p&gt;
&lt;h1&gt;The Downside of Automated Testing&lt;/h1&gt;
&lt;p&gt;Like many things, automated testing is a trade-off. Unit testing is the de-facto standard now in the software industry, so we happily accept the downsides in exchange for the wealth of benefits we receive. Regardless, here they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automated tests take time to write.&lt;/strong&gt; You could be writing production code instead! For very tiny projects, proof-of-concepts, prototypes, and simple applications, you may not care about testing at all.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing testable code changes your code.&lt;/strong&gt; Your code ends up being more decoupled, more isolated, and more testable. While these are all good software engineering practices, some communities look down on this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flaky tests.&lt;/strong&gt; Poorly-written integration tests (and sometimes unit tests) can fail on and off, sometimes for reasons not related to your change. (As you become more experienced with testing, you learn how to write less-flaky tests.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Major refactoring is expensive.&lt;/strong&gt; If you decide to change a significant amount of code - like moving a method from one place to another, or significantly changing functionality - you now need to pay the cost of updating lots of broken tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, the benefits heavily outweigh the costs. There's really no reason not to write automated tests!&lt;/p&gt;
&lt;h1&gt;Unit vs. Integration Testing&lt;/h1&gt;
&lt;p&gt;We touched earlier on the difference between unit and integration tests. Typically, unit tests test a single method or class. The hallmark of unit tests, is that they don't depend on anything external - they don't touch the database, the file-system, they don't make web-service calls, etc. Because of this, unit tests tend to be extremely stable and robust, and run in sub-millisecond time. A large suite of thousands of unit tests may run in just a few seconds.&lt;/p&gt;
&lt;p&gt;However, unit tests, by nature, test only a very limited set of functionality. Integration tests, in contrast, typically test more complex scenarios, and/or workflows.&lt;/p&gt;
&lt;p&gt;Imagine we wrote an RPG-style game. The user can battle monsters; on victory, he receives experience points, and can use those to invest in learning new skills.  If we structured this as typical domain-driven classes (such as &lt;code&gt;Player&lt;/code&gt;, &lt;code&gt;Monster&lt;/code&gt;, etc.) we might write unit tests such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Player.attack(target)&lt;/code&gt; damages the target&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Player.hurt(damage)&lt;/code&gt; decreases health&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Player.hurt(damage)&lt;/code&gt; throws an error if damage is less than zero (programmer bug)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all class/object/method-level tests. In contrast, we might write integration tests such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a player fights an enemy and defeats it, the player receives experience points&lt;/li&gt;
&lt;li&gt;When the player receives enough XP, they level up and gain skill points&lt;/li&gt;
&lt;li&gt;When monsters defeat the player, the game reaches a "game over" state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These tests, by nature, work with a larger set of code - so you can test more things. But, they can also be more fragile - if something breaks in the workflow (damage calculation broken? Level-up calculation broken? Skill-points UI broken?), the test can fail.&lt;/p&gt;
&lt;h1&gt;Godot with  Mono vs. GDscript&lt;/h1&gt;
&lt;p&gt;Godot provides two options for unit testing, depending on whether you prefer C# or GDscript.&lt;/p&gt;
&lt;p&gt;If you prefer C#, create your project as a Godot + Mono project, and write as much logic as possible in the C# code. This way, you can use the "usual" set of C# testing tools (NUnit, Moq, etc.) and everything Just Works.&lt;/p&gt;
&lt;p&gt;If you can't, won't, or prefer GDscript, you can use the GUT extension. (GUT stands for Godot Unit Test.)&lt;/p&gt;
&lt;h1&gt;Getting Started Testing (with Gut)&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/bitwes/Gut"&gt;GUT project page on GitHub&lt;/a&gt; provides a &lt;a href="https://github.com/bitwes/Gut/wiki/Install"&gt;detailed explanation of getting started&lt;/a&gt;, which I won't repeat here. Install GUT in your project, create a new scene with the &lt;code&gt;Gut&lt;/code&gt; object, and you're ready to go.&lt;/p&gt;
&lt;p&gt;Instead, I'll focus on getting started testing: what do you test? Assuming you have an existing project with an extensive code-base and zero unit tests, what do you do?&lt;/p&gt;
&lt;p&gt;Fundamentally, you need to start doing two things:&lt;/p&gt;
&lt;p&gt;1) Refactor your code to make it more testable
2) Write tests for any new code&lt;/p&gt;
&lt;p&gt;We didn't really touch on testable code in any depth. The short version is: write simple classes with simple methods, and avoid dependencies on any external "things." For example, if your &lt;code&gt;Player.damage&lt;/code&gt; class depends on a &lt;code&gt;Globals.battle_difficulty&lt;/code&gt; multiplier, accept it as a passed-in value instead of referencing the &lt;code&gt;Globals&lt;/code&gt; script. Change this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gd&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;total_defense&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defense&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;battle_difficulty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_health&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strength&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;total_defense&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Elsewhere&lt;/span&gt;
&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected_monster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gd&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;battle_difficulty&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;total_defense&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defense&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;battle_difficulty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_health&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strength&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;total_defense&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Elsewhere&lt;/span&gt;
&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected_monster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;battle_difficulty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the code is functionally equivalent, the latter is far more testable: you can pass in whatever value of &lt;code&gt;battle_difficutly&lt;/code&gt; you want in your tests, even invalid values like -3! In fact, this is the kind of functionality you want to unit-test: in addition to making sure it works with a correct difficulty, you can test that it fails appropriately (eg. throws an error or returns 0) with an invalid value - something you can't easily test through the actual game.&lt;/p&gt;
&lt;h1&gt;In Conclusion&lt;/h1&gt;
&lt;p&gt;We covered a lot of ground in this article.  In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We talked about automated testing, and why we care about it at all&lt;/li&gt;
&lt;li&gt;We looked at some of the benefits and advantages of unit-testing&lt;/li&gt;
&lt;li&gt;We touched on some of the downsides, most of which are not really disadvantageous&lt;/li&gt;
&lt;li&gt;We looked at unit vs. integration tests, and one way to define integration tests as workflows&lt;/li&gt;
&lt;li&gt;We covered testing with C# (in brief) vs. testing GDscript with Godot&lt;/li&gt;
&lt;li&gt;We looked at writing a few simple unit tests on a player class, and making code more testable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope this post benefited you, and convinced you to at least try unit testing! Please let me know your feedback &lt;a href="https://twitter.com/nightblade99"&gt;on Twitter&lt;/a&gt; - whether you decide to try testing, what you didn't understand, and what kind of topics you would like me to cover in future articles on Godot and testing.&lt;/p&gt;</content><category term="Game Development"></category></entry><entry><title>Godot Game Crashes On Startup, Logo Shows/Hides</title><link href="https://www.deengames.com/blog/2019/godot-game-crashes-on-startup-logo-showshides.html" rel="alternate"></link><published>2019-04-29T00:00:00-04:00</published><updated>2019-04-29T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2019-04-29:/blog/2019/godot-game-crashes-on-startup-logo-showshides.html</id><summary type="html">&lt;p&gt;I recently rebuilt a small app/game using Godot. For reference, the game contained one core loop, and took about four hours to build (from scratch). I reused all of the assets from the previous version of the game (audio and graphics), which took the bulk of development time on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently rebuilt a small app/game using Godot. For reference, the game contained one core loop, and took about four hours to build (from scratch). I reused all of the assets from the previous version of the game (audio and graphics), which took the bulk of development time on the original.&lt;/p&gt;
&lt;p&gt;The game built and ran flawlessly in Godot on Windows. As soon as I ran it on Android, the game briefly showed the Godot loading logo for ~100ms, then it disappeared, then reappeared/disappeared around four times (you can see the original issue I opened about on GitHub, &lt;a href="https://github.com/godotengine/godot/issues/27583"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The root cause of all this was multiple resources preloading the same script. I had a scene that preloaded &lt;code&gt;HelperScript.gd&lt;/code&gt; and then &lt;code&gt;Second.tscn&lt;/code&gt;; but &lt;code&gt;Second.tscn&lt;/code&gt; also preloaded &lt;code&gt;HelperScript.gd&lt;/code&gt;, causing the crash.&lt;/p&gt;
&lt;p&gt;I found three different ways to address this problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use singletons.&lt;/strong&gt; Instead of preloading &lt;code&gt;HelperScript.gd&lt;/code&gt; everywhere, I simply added it to the list of auto-loaded singletons in Godot. Problem solved. (This solution also makes sense, because I needed the same common method from &lt;code&gt;HelperScript.gd&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use &lt;code&gt;load&lt;/code&gt; instead of &lt;code&gt;preload&lt;/code&gt;.&lt;/strong&gt; This makes me think &lt;code&gt;preload&lt;/code&gt; is bugged; calling &lt;code&gt;load&lt;/code&gt; succeeds without any issues. Obviously, this has performance implications - you may &lt;em&gt;want&lt;/em&gt; to preload your entire game at startup time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactor.&lt;/strong&gt; In my case, I needed a common function from a shared script. What if I used the same file, but two different functions? Perhaps I could split &lt;code&gt;HelperScript.gd&lt;/code&gt; into two different scripts, and just load what I need instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you find your Godot game crashes on startup without explanation, maybe this is something you can investigate. (Failing that, go for a &lt;code&gt;git bisect&lt;/code&gt; and try to isolate the commit that broke everything.)&lt;/p&gt;</content><category term="Technical"></category><category term="Godot"></category><category term="Android"></category></entry><entry><title>Text Rendering Performance Check for a ReactJS ASCII Roguelike</title><link href="https://www.deengames.com/blog/2019/text-rendering-performance-check-for-a-reactjs-ascii-roguelike.html" rel="alternate"></link><published>2019-03-19T00:00:00-04:00</published><updated>2019-03-19T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2019-03-19:/blog/2019/text-rendering-performance-check-for-a-reactjs-ascii-roguelike.html</id><summary type="html">&lt;p&gt;&lt;img alt="image" src="https://i.imgur.com/bMgMS3E.gif"&gt;&lt;/p&gt;
&lt;p&gt;Recently, I was tasked with learning ReactJS (or just "React"). So, I made the most obvious choice possible: I decided to write an ASCII roguelike, which uses React as the front-end.&lt;/p&gt;
&lt;h2&gt;Why an ASCII Roguelike?&lt;/h2&gt;
&lt;p&gt;Why? For several, obvious reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have very limited time to work on this; perhaps …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image" src="https://i.imgur.com/bMgMS3E.gif"&gt;&lt;/p&gt;
&lt;p&gt;Recently, I was tasked with learning ReactJS (or just "React"). So, I made the most obvious choice possible: I decided to write an ASCII roguelike, which uses React as the front-end.&lt;/p&gt;
&lt;h2&gt;Why an ASCII Roguelike?&lt;/h2&gt;
&lt;p&gt;Why? For several, obvious reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have very limited time to work on this; perhaps as little as one hour a day, or less.&lt;/li&gt;
&lt;li&gt;ASCII roguelikes require little beyond a good monospace font -- no complex graphics, very simple animations&lt;/li&gt;
&lt;li&gt;I enjoy creating roguelikes. It's fun. Fun motivates me to work on this, which fuels my learning.&lt;/li&gt;
&lt;li&gt;Having created several (failed/incomplete) roguelikes in the past, I know how to code them. I don't have to think too hard about level generation algorithms, line-of-sight (or area-of-sight) lighting, etc. so I can focus on the technology.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set out to create, in my mind, the first step of any text roguelike: draw text on the screen &lt;em&gt;really fast&lt;/em&gt; and see how it performs. HTML should render at lightning-speed in my modern browser, right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;h2&gt;The Simplest Possible Performance Test&lt;/h2&gt;
&lt;p&gt;React is just a front-end technology; it doesn't dictate how I should structure my HTML. With that in mind, I set out to answer two questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What kind of performance can I expect with my roguelike?&lt;/li&gt;
&lt;li&gt;What factors affect performance? Does changing the font, applying colour (or not), using nested &lt;code&gt;div&lt;/code&gt; tags vs. &lt;code&gt;span&lt;/code&gt; tags, etc. make any difference?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In brief, the answer to question #2 ended up being "no." Performance bottlenecks on something else entirely; none of those changes make any significant difference.&lt;/p&gt;
&lt;p&gt;I wrote a little Javascript that tests exactly what I want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define dimensions of the screen. In this case, 50x16 tiles.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;div&lt;/code&gt; tag for each tile. Style it appropriately (eg. width/height big enough to fit any character)&lt;/li&gt;
&lt;li&gt;Very frequently (like, 60 times per second), update each tile's display to a random character with a random colour.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see the code, more or less (with FPS counting),  &lt;a href="https://github.com/nightblade9/space-marine-junaid/blob/master/prototypes/1-dom-performance/index.html"&gt;here&lt;/a&gt;.  It's simple, and to the point.&lt;/p&gt;
&lt;h2&gt;The Results&lt;/h2&gt;
&lt;p&gt;In a word: abysmal! On my fairly beefy dev machine (lots of RAM, good CPU, mediocre GPU), it renders at a measly 6-7FPS. You can see the results &lt;a href="https://twitter.com/nightblade99/status/1098278413935280128"&gt;in this tweet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I mentioned earlier, I tried several variations; none of them improve performance, at all. The core of it comes down to a call to set the character itself. Pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tiles&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;innerText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;character&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turns out that browsers, even modern ones, even on beefy hardware, are &lt;em&gt;really, really slow&lt;/em&gt; when you set &lt;code&gt;innerText&lt;/code&gt;. The only alternative - using &lt;code&gt;innerHTML&lt;/code&gt; -- is slower, and probably broken on Internet Explorer.&lt;/p&gt;
&lt;h3&gt;The Conclusion&lt;/h3&gt;
&lt;p&gt;For an ASCII roguelike without too much going on, 6FPS is probably enough. If I really cared about performance, I could switch to canvas-rendering and a bitmap font (lots of work and not sure how it works with React), or using images - either images of text, or real images.&lt;/p&gt;
&lt;p&gt;For me, the goal is to learn ReactJS, so I plan to continue forward with this as-is, without major surgery.&lt;/p&gt;</content><category term="Technical"></category><category term="ReactJS"></category><category term="Roguelike"></category></entry><entry><title>Creating Tilemaps with Tile Entities in Godot</title><link href="https://www.deengames.com/blog/2018/creating-tilemaps-with-tile-entities-in-godot.html" rel="alternate"></link><published>2018-10-02T00:00:00-04:00</published><updated>2018-10-02T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-10-02:/blog/2018/creating-tilemaps-with-tile-entities-in-godot.html</id><summary type="html">&lt;p&gt;Godot's tile editor provides you with the ability to quickly make 2D tile-maps, similar to RPG Maker. This makes it easy to design and tweak maps. But can we take it a step further? Can we, in fact, use the tilemap editor to create &lt;em&gt;functioning entities&lt;/em&gt; -- making it a domain-specific …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Godot's tile editor provides you with the ability to quickly make 2D tile-maps, similar to RPG Maker. This makes it easy to design and tweak maps. But can we take it a step further? Can we, in fact, use the tilemap editor to create &lt;em&gt;functioning entities&lt;/em&gt; -- making it a domain-specific editor for our specific game?&lt;/p&gt;
&lt;p&gt;We can. This post walks through a lightning-quick method you can use.&lt;/p&gt;
&lt;h2&gt;The Core Idea&lt;/h2&gt;
&lt;p&gt;Godot's &lt;code&gt;Tilemap&lt;/code&gt; entities are simple. They're essentially a reference to a tileset (graphic with all your tiles on it), and one or more layers of those tiles drawn on a grid.  In Godot, tilemaps are all about presentation.&lt;/p&gt;
&lt;p&gt;What if you want to add functionality though? Imagine you're creating a 2D adventure or RPG (like, hmm, &lt;a href="https://play.google.com/store/apps/details?id=com.deengames.eidisland"&gt;Eid Island&lt;/a&gt; maybe?), and you want to be able to draw enemies on the map. Or trees you can chop down, coins you can pick up, or anything else.&lt;/p&gt;
&lt;p&gt;By itself, Godot doesn't provide a way to do this. However, I asked around on Discord, and checked some issues on GitHub about this; a definitive, simple approach appeared, something like a best-practice. How? Easy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define your tilesets as usual, including objects&lt;/li&gt;
&lt;li&gt;Draw them in as many layers as you like, as usual&lt;/li&gt;
&lt;li&gt;At runtime, iterate over the tiles, replacing the object ones with real entities (&lt;code&gt;Scene&lt;/code&gt; instances)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Secet Sauce: Swapping Tiles for Entities&lt;/h2&gt;
&lt;p&gt;Godot makes this process quite easy. As a pre-requisite, I would recommend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All your tiles have proper, uniquely-identifying names (like &lt;code&gt;Tree&lt;/code&gt; or &lt;code&gt;Plain Water&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;You create entities for everything you want to replace, such as a &lt;code&gt;Tree&lt;/code&gt; scene (subclasses &lt;code&gt;Node2D&lt;/code&gt;, has a &lt;code&gt;Sprite&lt;/code&gt;, script, etc.)&lt;/li&gt;
&lt;li&gt;You map the two. I use a dictionary such as: &lt;code&gt;var entity_tiles = { "Tree": preload("res://Scenes/Entities/Tree.tscn") }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in place, we simply iterate over the tiles and -- if the name appears in our dictionary -- replace the tile with its corresponding entity. Here's &lt;a href="https://github.com/nightblade9/eid-island/blob/7ec52d4a9b33feb87d6e05be0908e449cb1fa330/source/Scripts/MapCreator.gd#L48"&gt;an early reference implementation&lt;/a&gt; in Eid Island. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;real&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scenes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_populate_entities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;possible_tilemaps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_children&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;possible_tilemaps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;TileMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tile_set&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_used_cells&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cellv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tile_get_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entity_tiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entity_tiles&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tile_name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TILE_WIDTH&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TILE_HEIGHT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;tile_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_cellv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Globals.TILE_WIDTH&lt;/code&gt; and &lt;code&gt;TILE_HEIGHT&lt;/code&gt; refer to the (fixed) tile size; you can, alternatively, use the tileset/tilemap to get the cell size, or use the entity size as a reference (although the entity should be exactly one tile size for that to work).&lt;/p&gt;
&lt;p&gt;With this in place, you can quickly and easily create levels with real functionality from simple tilesets.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;One obvious missing piece of functionality is customization. What if my tile is, say, a door that warps somewhere, and I want to specify the destination properties when I draw the tile? How can I do that?&lt;/p&gt;
&lt;p&gt;Unfortunately, I don't know the answer yet. As far as I know, Godot doesn't allow you to add additional variables/properties to the tile itself. Perhaps you could store the data elsewhere, such as a separate dictionary mapping entity/coordinates to custom data.&lt;/p&gt;
&lt;p&gt;If you know how to solve this latter problem, drop us a note &lt;a href="https://github.com/nightblade99"&gt;on Twitter&lt;/a&gt; or in the Godot Discord chat so we can use it too!&lt;/p&gt;</content><category term="Technical"></category><category term="Godot"></category></entry><entry><title>Eman Quest Restrospective: A Procedural RPG in a Month</title><link href="https://www.deengames.com/blog/2018/eman-quest-restrospective-a-procedural-rpg-in-a-month.html" rel="alternate"></link><published>2018-09-28T00:00:00-04:00</published><updated>2018-09-28T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-09-28:/blog/2018/eman-quest-restrospective-a-procedural-rpg-in-a-month.html</id><summary type="html">&lt;p&gt;&lt;img alt="screenshot of a hero facing a boss" src="https://i.imgur.com/Nu9doZ9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This month, I set out with a very specific goal: create a 2D procedurally-generated RPG; something I've never heard of (or done before). Although I ran out of time, I plan to devote another month to the game. This retrospective discusses the good, the bad, and the work ahead of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="screenshot of a hero facing a boss" src="https://i.imgur.com/Nu9doZ9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This month, I set out with a very specific goal: create a 2D procedurally-generated RPG; something I've never heard of (or done before). Although I ran out of time, I plan to devote another month to the game. This retrospective discusses the good, the bad, and the work ahead of us.&lt;/p&gt;
&lt;h2&gt;Goal: What is a Procedurally-Generated RPG?&lt;/h2&gt;
&lt;p&gt;I grew up playing Secret of Mana, Final Fantasy, Chrono Trigger, and other great titles. One day, I thought to myself, &lt;em&gt;what if I can only create one more game before I die? What would I create?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The answer? Something akin to those favourites; a game that generates a &lt;em&gt;brand new,&lt;/em&gt; quality RPG, &lt;em&gt;every time you plan.&lt;/em&gt; I spent some weeks brainstorming what I needed and didn't need, plans to create content such as monsters, weapons, etc. Some things clearly need to be procedurally-generated (such as dungeons and maps), while others don't (such as enemy sprites and player skills).&lt;/p&gt;
&lt;p&gt;A couple of false-starts later, I finally opened up the Godot editor and started the third (or fourth) attempt.&lt;/p&gt;
&lt;h2&gt;The Good: What Went Well&lt;/h2&gt;
&lt;p&gt;Initially, I focued on the &lt;em&gt;technical&lt;/em&gt; side of procedural generation: creating stuff! As of writing, the game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generates a new, persistent world map each time; this includes a river that runs into a small lake, and randomly-positioned dungeon entrances&lt;/li&gt;
&lt;li&gt;A procedurally-generated forest dungeon; it's a single, large map, with trees, dirt paths, monsters, and a boss.&lt;/li&gt;
&lt;li&gt;Procedurally-generated equipment (weapons and armour), each with unique stats modifiers&lt;/li&gt;
&lt;li&gt;Loot in the form of treasure chests in the forest dungeon.&lt;/li&gt;
&lt;li&gt;The story. While very basic, the game generates the intro plot text, including the town name and final enemy type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The forest dungeon took longer than expected. On the technical side, I figured out how to make Godot generate and persist my maps/game; initially with packed scenes (which got garbage-collected when I changed scenes, causing crashes), and later by separating the generation of game data from the presentation (populating scenes/tilemaps/etc. from content).&lt;/p&gt;
&lt;p&gt;Solving technical issues aside, I also spent too much time on what didn't go so well: the battle engine.&lt;/p&gt;
&lt;h2&gt;The Bad: What Could've Been Better&lt;/h2&gt;
&lt;p&gt;I find the concept of memory games fascinating (as an ex-Lumosity player). An Extra Credits video on &lt;a href="https://www.youtube.com/watch?v=oEDVDhOYJ2I"&gt;puzzle vs. reflex mechanics&lt;/a&gt; challenged me to introduce something new into my game.&lt;/p&gt;
&lt;p&gt;At the heart of every RPG, in terms of fun gameplay, lies a fun and challenging battle system. I decided to design a memory-based battle system:&lt;/p&gt;
&lt;p&gt;&lt;img alt="battle engine animation" src="https://i.imgur.com/vln27Un.gif"&gt;&lt;/p&gt;
&lt;p&gt;This probably proved to be my undoing. I spent several days designing, balancing, and tweaking the battle engine; adding new features, action types, and skills. Five beta testers provided feedback after trying it out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One really liked it&lt;/li&gt;
&lt;li&gt;One said it's okay and could be improved&lt;/li&gt;
&lt;li&gt;Three others didn't like it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, after several days, I forced myself to stop tweaking/changing it and decided to focus on fulfilling the rest of the game.&lt;/p&gt;
&lt;p&gt;Last, and perhaps worst, the game &lt;em&gt;feels&lt;/em&gt; incomplete. Sure, you get a randomly-generated forest; but even with the intended scope for the end of the month (two dungeons with two different variations, including unique monsters), it might not be enough to give players that experience of a procedurally-generated RPG.&lt;/p&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;I don't intend to give up; I plan to fill out and ship a version of this game (although with what functionality/content remains to be seen). My current plan of action looks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finish the end-game sequence so players can actually complete the game&lt;/li&gt;
&lt;li&gt;Create two variants on the forest (frost forest and death forest) each with unique enemies&lt;/li&gt;
&lt;li&gt;Create a second dungeon (cave) with two variants (one is a volcano)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, I plan to create a &lt;em&gt;proper RPG world.&lt;/em&gt; A good RPG, like a good novel, contains elements that all harmonize and work together to communicate a singular world/message. Right now, we have a patch of hastily-named enemies, skills, etc. and these need to be brought together.&lt;/p&gt;
&lt;p&gt;More specifically, I didn't yet start the other hard/fun part of a procedural RPG: creating a procedural world (and story) that feels unique. This includes a unique/different protagonist for each story.&lt;/p&gt;
&lt;p&gt;Finally, another round of beta testing should reveal whether the game is interesting/fun or not, and I should either finish it as-is or if I need to rewrite/rethink battles entirely. Time will tell. September may be almost gone, but October brings another month brimming with potential for me to see this game through to its potential.&lt;/p&gt;
&lt;p&gt;If you're interested in following my development on this project, feel free to &lt;a href="https://twitter.com/nightblade99"&gt;follow me on Twitter&lt;/a&gt;. &lt;/p&gt;</content><category term="Devlog"></category><category term="Retrospective"></category></entry><entry><title>Instance vs. New in Godot</title><link href="https://www.deengames.com/blog/2018/instance-vs-new-in-godot.html" rel="alternate"></link><published>2018-09-25T00:00:00-04:00</published><updated>2018-09-25T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-09-25:/blog/2018/instance-vs-new-in-godot.html</id><summary type="html">&lt;p&gt;&lt;img alt="godot logo" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Godot_logo.svg/799px-Godot_logo.svg.png"&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Godot provides a way to separate the presentation part of game entities from their underlying data. You can think of this as something akin to the Model-View-Controller design pattern, where scripts (classes/code) respresent the model and instanced scenes (sprite, animation, etc.) represent the presentation and control (eg. collision …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="godot logo" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Godot_logo.svg/799px-Godot_logo.svg.png"&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Godot provides a way to separate the presentation part of game entities from their underlying data. You can think of this as something akin to the Model-View-Controller design pattern, where scripts (classes/code) respresent the model and instanced scenes (sprite, animation, etc.) represent the presentation and control (eg. collision resolution).&lt;/p&gt;
&lt;p&gt;During the development of &lt;a href="https://deengames.itch.io/eman-quest"&gt;Eman Quest&lt;/a&gt;, we continuously ran into a problem around instancing scenes that are &lt;em&gt;strongly typed&lt;/em&gt; and have methods from their corresponding scripts. In fact, there's even &lt;a href="https://github.com/godotengine/godot/issues/15866"&gt;an open bug about it&lt;/a&gt; as of Godot 3.0.6.&lt;/p&gt;
&lt;p&gt;You can find a description of the problem below, along with the solution, and recommendations.&lt;/p&gt;
&lt;h2&gt;Why This Became a Problem&lt;/h2&gt;
&lt;p&gt;We created Eman Quest as a procedurally-generated RPG; the idea is to generate a persistent, complete world (maps, enemies, etc.) By itself, this proves to be an interesting and troublesome problem to solve, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Godot, everything is a scene. Your world map, forest map, etc. are scenes.&lt;/li&gt;
&lt;li&gt;You can't easily persist scenes or their entities.&lt;/li&gt;
&lt;li&gt;When you change scenes, the old scene -- and all entities -- get garbage-collected.&lt;/li&gt;
&lt;li&gt;Fundamentally, you need to separate &lt;em&gt;data from the view/presentation.&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To solve this, we started initially by generating scenes and saving those; when the GC reared it's dragonish head, we instead moved to saving data as arbitrary JSON (dictionaries) of key/value pairs; when this required maintaining a set of properties twice (eg. monster strength in JSON vs. strength attribute in the instanced scene), we finally moved to &lt;em&gt;creating scenes and matching scripts/classes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then we broke Godot.&lt;/p&gt;
&lt;h2&gt;The Problem and Symptoms&lt;/h2&gt;
&lt;p&gt;Near the middle of development, while creating a &lt;code&gt;TreasureChest&lt;/code&gt; class, I ran into an interesting problem: although my script file defined several methods and properties (like &lt;code&gt;.open()&lt;/code&gt; or &lt;code&gt;.contents&lt;/code&gt;), I couldn't call any of them; Godot complained:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Invalid set index 'contents' (on base: StaticBody2D') with value of type 'Nil'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Godot identified/typed the instance as &lt;code&gt;StaticBody2D&lt;/code&gt;, not &lt;code&gt;TreasureChest&lt;/code&gt;. Why?&lt;/p&gt;
&lt;p&gt;It turns out the answer lies in the two methods Godot offers to create objects: &lt;code&gt;.instance&lt;/code&gt; and &lt;code&gt;.new&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Scenes vs. Scripts as Classes&lt;/h2&gt;
&lt;p&gt;Naively, Godot offers two ways to create an entity: &lt;code&gt;instance&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If it's a &lt;code&gt;Scene&lt;/code&gt; with sub-objects (such as a &lt;code&gt;Sprite&lt;/code&gt;), you load/preload the &lt;code&gt;.tscn&lt;/code&gt;, and call &lt;code&gt;instance&lt;/code&gt;. For example: &lt;code&gt;var treasure_chest = load("res://Entities/TreasureChest.tscn").instance()&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;This creates the entire hierarchy of sub-scenes. When you call &lt;code&gt;add_child&lt;/code&gt; to add it to the scene, Godot calls the &lt;code&gt;_ready&lt;/code&gt; function; this is where you put &lt;em&gt;constructor-like&lt;/em&gt; code.&lt;/p&gt;
&lt;p&gt;Alternatively, if you just have a "class" defined in a script, you load/preload the &lt;code&gt;.gd&lt;/code&gt; file and call &lt;code&gt;new&lt;/code&gt; on it. For example: &lt;code&gt;var treasure_chest = load("res://Entities/TreasureChest.gd").new(contents, coordinates, etc.)&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In the latter case, you define an &lt;code&gt;_init&lt;/code&gt; function for a constructor, and specify whatever parameters you like. This conveniently allows you to specify state and guarantee invariants, such as "treasure chests always have non-null contents."&lt;/p&gt;
&lt;p&gt;However, &lt;em&gt;Godot breaks when you cross these two together.&lt;/em&gt; If you load a &lt;code&gt;.tscn&lt;/code&gt; definition and then call &lt;code&gt;instance&lt;/code&gt;, and &lt;em&gt;the class/script back-end has an &lt;code&gt;_init&lt;/code&gt; function,&lt;/em&gt; the instanced scene doesn't have any of the scripts defined methods/properties.&lt;/p&gt;
&lt;h2&gt;Solution and Combining the Two Approaches&lt;/h2&gt;
&lt;p&gt;This &lt;em&gt;could&lt;/em&gt; be because of timing (when in the life-cycle we're creating the script), I don't know. What I do know, is that removing &lt;code&gt;_init&lt;/code&gt; fixes the problem. But then, how do we re-add initialization of the entity's state?&lt;/p&gt;
&lt;p&gt;For entities where we use both the instanced scene (in the place where we populate the tilemaps, etc. on-screen) and the script only (as the generated back-end data/object), we decided on the following approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't use &lt;code&gt;_init&lt;/code&gt;. It could lead to this obscure bug again later, and suck up a ton of time to figure out.&lt;/li&gt;
&lt;li&gt;To construct a new object class/script instance, create an &lt;code&gt;initialize&lt;/code&gt; method and use that as the constructor. This is where we can set state/invariants, etc.&lt;/li&gt;
&lt;li&gt;Keep a single scene for the presentation, and use a script to keep all the back-end class code (properties/methods)&lt;/li&gt;
&lt;li&gt;When we need to instance the actual scene tree for that object -- such as with monsters or treasure chests -- keep the data object separate, and create an &lt;code&gt;initialize_from&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialize_from&lt;/code&gt; sets all the properties on the scene (such as presentation: is the treasure chest already opened or not?) based on the properties of the class/data object underlying.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This approach also solved other problems, such as keeping references to instances across scenes. Godot doesn't like this, because it tries to GC everything. Storing the data separately neatly (sometimes in a singleton script) solves this problem.&lt;/p&gt;
&lt;h2&gt;Conclusion and Future Improvements&lt;/h2&gt;
&lt;p&gt;This solution solves our problem neatly. It keeps our code DRY, by using one definition of an entity's properties. It allows us to separate presentation from model/data, which is useful to prevent coupling.&lt;/p&gt;
&lt;p&gt;But, it's not ideal. At best, we can use &lt;code&gt;_init&lt;/code&gt; judiciously for entities that we know we'll never show in a scene. We can always resort to using data (dictionaries/JSON) instead of classes; we miss out on code completion, but this better represents entity-component systems with data-driven design.&lt;/p&gt;
&lt;p&gt;Did you ever run into this problem? Do you see a better way of solving it? Drop a comment and let us know, we would really love to hear about better solutions to this problem.&lt;/p&gt;</content><category term="Technical"></category><category term="Godot"></category></entry><entry><title>A Month in Review: July 2018</title><link href="https://www.deengames.com/blog/2018/a-month-in-review-july-2018.html" rel="alternate"></link><published>2018-08-03T00:00:00-04:00</published><updated>2018-08-03T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-08-03:/blog/2018/a-month-in-review-july-2018.html</id><summary type="html">&lt;p&gt;July brought a lot of challenges. @Chemical_Ink's internet went down for several days. I ran into a very busy work schedule. All of this meant less time for Abu Hamid X; but walhamdulillah, we still managed to ship a lot of changes.&lt;/p&gt;
&lt;p&gt;Perhaps most importantly, we decided to drop the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;July brought a lot of challenges. @Chemical_Ink's internet went down for several days. I ran into a very busy work schedule. All of this meant less time for Abu Hamid X; but walhamdulillah, we still managed to ship a lot of changes.&lt;/p&gt;
&lt;p&gt;Perhaps most importantly, we decided to drop the adventure/open-world concept and stick to what we prototyped and proved as fun: the arena combat challenge. This introduced a lot of story/worldbuilding challenges, but we managed to work something out.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://cdn.discordapp.com/attachments/460638759470366733/475123856483287052/ahx-betaboosters-july2018.gif"&gt;&lt;/p&gt;
&lt;p&gt;New features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Half-hidden assassins who lunge and stab from out-of-sight&lt;/li&gt;
&lt;li&gt;Lava eruptions that mean instant death&lt;/li&gt;
&lt;li&gt;Proximity mines that explode&lt;/li&gt;
&lt;li&gt;Jumping enemies&lt;/li&gt;
&lt;li&gt;Spike traps&lt;/li&gt;
&lt;li&gt;And more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For our Patreon supporters, you can download the prototype &lt;a href="https://www.patreon.com/posts/beta-boosters-x-20532963"&gt;here&lt;/a&gt;. If you're not a Patreon supporter, consider joining us; your feedback shapes the direction of our games.&lt;/p&gt;
&lt;p&gt;Once we get feedback, our plan is to start the actual production version of the game. You can follow us on Twitter for updates.&lt;/p&gt;</content><category term="Devlog"></category></entry><entry><title>A Month in Review: June 2018</title><link href="https://www.deengames.com/blog/2018/a-month-in-review-june-2018.html" rel="alternate"></link><published>2018-07-01T00:00:00-04:00</published><updated>2018-07-01T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-07-01:/blog/2018/a-month-in-review-june-2018.html</id><summary type="html">&lt;p&gt;With the end of Ramadan cutting through the first half of June, we made little progress in the first two weeks. That makes it even more exciting that we completed the prototype of our new game, tentatively titled "Abu Hamid!"&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://cdn.discordapp.com/attachments/460638972889137152/462363418675118103/abu-hamid.gif"&gt;&lt;/p&gt;
&lt;p&gt;Every prototype aims to answer a question. This prototype answers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the end of Ramadan cutting through the first half of June, we made little progress in the first two weeks. That makes it even more exciting that we completed the prototype of our new game, tentatively titled "Abu Hamid!"&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://cdn.discordapp.com/attachments/460638972889137152/462363418675118103/abu-hamid.gif"&gt;&lt;/p&gt;
&lt;p&gt;Every prototype aims to answer a question. This prototype answers the question: "can a jetpack-toting samurai with a gun, flying around and killing hordes of enemies and giants, be a fun gaming experience?" We believe the answer is "yes!"&lt;/p&gt;
&lt;p&gt;You can see the core gameplay elements in the screenshot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running around, jumping&lt;/li&gt;
&lt;li&gt;Flying with a jetpack with limited fuel&lt;/li&gt;
&lt;li&gt;Attacking enemies with a sword&lt;/li&gt;
&lt;li&gt;Shooting with a gun&lt;/li&gt;
&lt;li&gt;Fighting giant, semi-invincible monsters (the juggling is a physics bug)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For our Patreon supporters, you can download the prototype &lt;a href="https://www.patreon.com/posts/beta-boosters-x-19758114"&gt;here&lt;/a&gt;. If you're not a Patreon supporter, consider joining us; your feedback shapes the direction of our games.&lt;/p&gt;
&lt;p&gt;Once we gather some feedback, we can plan the next phase and start on the actual game: planning, coding, art, sound, and more. (You can also follow us &lt;a href="https://twitter.com/nightblade99"&gt;on twitter&lt;/a&gt; for more frequent updates.)&lt;/p&gt;</content><category term="Devlog"></category></entry><entry><title>How Tiny Rails Quietly Normalizes Islam and Muslims</title><link href="https://www.deengames.com/blog/2018/how-tiny-rails-quietly-normalizes-islam-and-muslims.html" rel="alternate"></link><published>2018-06-25T00:00:00-04:00</published><updated>2018-06-25T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-06-25:/blog/2018/how-tiny-rails-quietly-normalizes-islam-and-muslims.html</id><summary type="html">&lt;p&gt;One of our main goals at Deen Games is to represent the views of Islam and Muslims in games. Muslims have something of a negative image in games. To paraphrase one video from Extra Credits: "Enemies in FPS games have gradually changed from Nazis to Arabs [Muslims]." One of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of our main goals at Deen Games is to represent the views of Islam and Muslims in games. Muslims have something of a negative image in games. To paraphrase one video from Extra Credits: "Enemies in FPS games have gradually changed from Nazis to Arabs [Muslims]." One of the games that casually but positively portrays us is Tin Rails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Credit: Tiny Rails Wiki" src="https://i.imgur.com/vxiqEPa.png"&gt; (The Great Mosque of Djenne, Africa. Credit: Tiny Rails wiki)&lt;/p&gt;
&lt;p&gt;Tiny Rails is something of a cult hit on Google Play, with over a million downloads and more than 50k reviews averaging 4.5 stars. You play the role of a small up-and-coming mom-and-pop train company, working to build a name for yourself and grab a cut of the market from bigger, established railroad companies like RailCo.&lt;/p&gt;
&lt;p&gt;The game plays out as something of an idle game. While you can select upgrades, equip cars, plot your destiation, etc. most of the travel time takes place completely automatically with little or no intervention. &lt;/p&gt;
&lt;p&gt;Moments provide one exception to this. While travelling between certain cities, you can randomly stumble upon a real-world landmark, such as the Atlanta Airport or the CN Tower; snapping a picture of this (the in-game camera view automatically appears) nets you a few gold.&lt;/p&gt;
&lt;p&gt;Both of these mechanics subtly and humbly add Islam and Muslims to the mix. Tiny Rails includes eight different moments that document mosques in different parts of the world, ranging from Africa to the Middle East to Russia.  Like any other moments to discover, you receive an in-game reward, encouraging discovery of these moments.&lt;/p&gt;
&lt;p&gt;You can also take a look at which passengers inhabit your train at any given time. Passengers include a visibly-Muslim cast.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Credit: Mobile Syrup" src="https://i.imgur.com/PqU40kL.png"&gt; (Getting feedback from train passengers. Credit: Mobile Syrup)&lt;/p&gt;
&lt;p&gt;Both these gameplay elements normalize an otherwise negative image of Muslims and Islam in games. And Tiny Rails pulls it off without any fuss or fan-fare.&lt;/p&gt;
&lt;p&gt;You can grab Tiny Rails &lt;a href="https://play.google.com/store/apps/details?id=com.tinytitanstudios.TrainChu"&gt;from Google Play, here&lt;/a&gt; if you want to give it a try. It's a great example of how a game can be positive and inclusive and part of their core gameplay.&lt;/p&gt;</content><category term="Game Design"></category><category term="Game Design Analysis"></category></entry><entry><title>A Month in Review: May 2018</title><link href="https://www.deengames.com/blog/2018/a-month-in-review-may-2018.html" rel="alternate"></link><published>2018-06-01T00:00:00-04:00</published><updated>2018-06-01T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-06-01:/blog/2018/a-month-in-review-may-2018.html</id><summary type="html">&lt;p&gt;This month, we spent quite a lot of time planning and articulating our next project. It's a big one! Unlike previous projects, we decided to bite on something large and ambitous.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://i.imgur.com/B3tp3dy.gif"&gt;&lt;/p&gt;
&lt;p&gt;We're in the early stages of prototyping, so I can't share too many details right now (as things are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This month, we spent quite a lot of time planning and articulating our next project. It's a big one! Unlike previous projects, we decided to bite on something large and ambitous.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://i.imgur.com/B3tp3dy.gif"&gt;&lt;/p&gt;
&lt;p&gt;We're in the early stages of prototyping, so I can't share too many details right now (as things are scarce). Our major Islamic/educational goal for this project is to &lt;em&gt;show world events through an Islamic lens.&lt;/em&gt; How that will play out, we will see.&lt;/p&gt;
&lt;p&gt;As far as prototyping, we have our basic jetpack/combat system in place. You can fly around the screen and strike enemies, and they can harm you (sort of).&lt;/p&gt;
&lt;p&gt;There's a lot of work left to be done in prototyping, but we're fairly optimistic that this will result in a fun core game loop with lots of interesting side gameplay.&lt;/p&gt;
&lt;p&gt;We're also breaking from game development for a couple of weeks, as we're now entering the last half of Ramadan. You can expect game development to resume its regular schedule in mid-to-late-June.&lt;/p&gt;</content><category term="Devlog"></category></entry><entry><title>The Brilliance of Bastion's Flexible Builds</title><link href="https://www.deengames.com/blog/2018/the-brilliance-of-bastions-flexible-builds.html" rel="alternate"></link><published>2018-05-15T00:00:00-04:00</published><updated>2018-05-15T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-05-15:/blog/2018/the-brilliance-of-bastions-flexible-builds.html</id><summary type="html">&lt;p&gt;&lt;img alt="Bastion character upgrade choice" src="https://i.imgur.com/GYqOEZF.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In RPGs (especially those of the 90s and early 2000s), game designers typically increase difficulty by creating increasingly powerful enemies (and more dangerous groups). To balance this, player characters engage in combat, gain experience points, and level up. Obviously, you want the game should increase in challenge/difficulty over time …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Bastion character upgrade choice" src="https://i.imgur.com/GYqOEZF.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In RPGs (especially those of the 90s and early 2000s), game designers typically increase difficulty by creating increasingly powerful enemies (and more dangerous groups). To balance this, player characters engage in combat, gain experience points, and level up. Obviously, you want the game should increase in challenge/difficulty over time, or it starts to bore the player.&lt;/p&gt;
&lt;p&gt;With this approach, players have an advantage: if stuck, players can grind (kill monsters over and over again) and be able to progress further (in contrast to remaining stuck in the same impassable area). However, it also includes a couple of drawbacks for the player:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Which Choice to Pick&lt;/strong&gt;: When faced with multiple choices (eg. two options to upgrade your character), the player often lacks enough information to decide. Even if they know which option they want to pick, the player almost never has the ability to actually &lt;em&gt;try&lt;/em&gt; both options and see which one works best.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fixed Builds:&lt;/strong&gt; Once the player chooses, there's no going back. This is partly the cause of &lt;em&gt;decision paralysis&lt;/em&gt; where players take forever to choose. Worse, if your game is not carefully balanced to cover all possibilities, the player may end up making a series of decisions that leave them with an impossible-to-win build, although grinding can help here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Brilliance of Bastion&lt;/h2&gt;
&lt;p&gt;Bastion solves both these problems by allowing you to "re-spec" or change your upgrade decisions at &lt;em&gt;virtually any point in the game.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Bastion, when the player levels up, they unlock a slot for "Spirits," which provide stats boosts; the player also receives a few unique choices per slot. The player can always return to the Distilliary building and change which spirits they've selected.&lt;/p&gt;
&lt;p&gt;With weapons, Bastion follows a two-step process: first, you find an upgrade item, and pay to unlock it. Once you do that, the game presents you with two options per upgrade; you can pick between them (and change your choices) at any time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bastion weapon upgrades" src="https://i.imgur.com/MJ183AD.png"&gt;&lt;/p&gt;
&lt;p&gt;At a micro-level, the user can pick individual upgrades. However, with both spirits and with weapon upgrades, the player can &lt;em&gt;create builds&lt;/em&gt; at a macro level. Many of the options harmonize well with other options; and between the choice of player upgrades and weapon upgrades, the player can craft a large number of builds that suit their particular preferences of playing style and their choice of weapons.&lt;/p&gt;
&lt;p&gt;Best of all, the player can &lt;em&gt;test and tweak their builds,&lt;/em&gt; and &lt;em&gt;change their minds at any time.&lt;/em&gt; This, in addition to the unparalleled flexibilty, gives the player a lot of freedom.&lt;/p&gt;
&lt;p&gt;But, it comes at a cost: some combinations are obviously more powerful than others, and some are quite unbalanced. This makes the game design a bit more challenging, because the designer needs to handle a wider range of possibilities.&lt;/p&gt;
&lt;h2&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;As game designers, I think we can learn a lot from Bastion's design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Providing a flexible upgrade system gives players the ability to tweak and test their builds&lt;/li&gt;
&lt;li&gt;Flexible builds makes it less likely for the player to be really stuck (there are lots of alternatives to try)&lt;/li&gt;
&lt;li&gt;But, flexible builds requires care to make sure some builds are not over-/under-powered, and that levels are balanced&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, many games already implement flexible builds today, including League of Legends and DOTA 2, and even classics like Final Fantasy 5. We can see, from this, that the concept of flexible builds can apply to different game genres.&lt;/p&gt;
&lt;p&gt;If you think flexible builds can add to your game, try it, and see if the benefit of multiple progression paths outweighs the cost of slightly more complex game balancing.&lt;/p&gt;</content><category term="Game Development"></category></entry><entry><title>Game Design in Open-World</title><link href="https://www.deengames.com/blog/2018/game-design-in-open-world.html" rel="alternate"></link><published>2018-05-11T00:00:00-04:00</published><updated>2018-05-11T00:00:00-04:00</updated><author><name>chemicalink</name></author><id>tag:www.deengames.com,2018-05-11:/blog/2018/game-design-in-open-world.html</id><summary type="html">&lt;p&gt;According to many, open-world is fun. Perhaps it's the sense of freedom, progression, or influence upon the world
which tickles a player's funny bone. Whichever it is, if there's anything we game designers know, it's that it's hard to
pull off.&lt;/p&gt;
&lt;h3&gt;Open-World?! What's That Mumbo-Jumbo's All About?&lt;/h3&gt;
&lt;p&gt;Firstly, what is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;According to many, open-world is fun. Perhaps it's the sense of freedom, progression, or influence upon the world
which tickles a player's funny bone. Whichever it is, if there's anything we game designers know, it's that it's hard to
pull off.&lt;/p&gt;
&lt;h3&gt;Open-World?! What's That Mumbo-Jumbo's All About?&lt;/h3&gt;
&lt;p&gt;Firstly, what is an open-world game? &lt;a href="https://en.wikipedia.org/wiki/Open_world"&gt;Trusty Wikipedia reports&lt;/a&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;A video game in which a player can roam a virtual world and approach objectives freely, as opposed to a game with more linear gameplay.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yet with such a notion of a player freely wandering into wherever they please comes bundled with a set of issues which,
if not dealt with properly, will make or break your game. Most prominently...&lt;/p&gt;
&lt;h3&gt;Player Power Level vs. World Power Level&lt;/h3&gt;
&lt;p&gt;Imagine you're making a game with a linear main quest where monsters gradually get stronger as the player progresses and
gains more power. You wake up one day and decide open-world is the one feature which &lt;em&gt;has&lt;/em&gt; to be included in your game.
So you go ahead and remove all travel restrictions, and add a bit of side content.&lt;/p&gt;
&lt;p&gt;The ingenuous player decides to delay your main quest and spend some time on side quests. "Those monsters sure keep
getting stronger," thought the player. "I need to do some side quests so I can stay one step ahead of them."&lt;/p&gt;
&lt;p&gt;Lo and behold, your carefully crafted power balance is completely destroyed, leaving you with an overpowered player
to wipe the floor with any poor monster who dares cross his path.&lt;/p&gt;
&lt;p&gt;I'm sure you can imagine an alternative where the player is wrecked in side quests meant for a more powerful player.&lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;So how do you solve this? Let me just quote &lt;a href="https://gamedev.stackexchange.com/a/1660"&gt;a little thing&lt;/a&gt; I've read in the vast cosmos of the interwebz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;design&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pretty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;much&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;giant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CENSORED&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;borrowing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words, in order to do things properly, we need to study the work of others, and see how &lt;em&gt;they&lt;/em&gt;'ve done it.&lt;/p&gt;
&lt;p&gt;Let's take a &lt;a href="http://en.uesp.net/wiki/Skyrim:Leveling"&gt;look&lt;/a&gt; at the amazing Skyrim. How does it handle its level scaling?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Different locations in Skyrim have different inherent difficulties. In other words, some dungeons are designed to be too difficult for low-level characters to enter.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is to say, every location has a minimum and a maximum level. Say we have a dungeon from level 5 to 30.&lt;/p&gt;
&lt;p&gt;If the player enters &lt;em&gt;before&lt;/em&gt; the minimum level at, say, level 2, they enter a dungeon with stronger level 5 enemies and
better loot. If the player enters &lt;em&gt;within&lt;/em&gt; the level range, for example, level 15, the dungeon would contain level 15
enemies. And if the player enters &lt;em&gt;after&lt;/em&gt; the maximum level, that is, 30+ they get to wipe the floor with level 30 enemies.&lt;/p&gt;
&lt;p&gt;Such a system allows for intricate risk/reward balancing. As in, "Just defeated a horde of trolls 10 levels above yourself? Here's
some awesome loot to compensate." and "Done wiping the floor? Here's your two septims."&lt;/p&gt;
&lt;h3&gt;In Conclusion&lt;/h3&gt;
&lt;p&gt;Well there you have it. You've learned to avoid a game-breaking problem with open-world games. And in the solution,
apply a new fun mechanic giving the player &lt;em&gt;choice&lt;/em&gt;; and lots of rewards for daring ones.&lt;/p&gt;
&lt;p&gt;What do you think of the proposed solution? Have you encountered other problems with open-world games? Leave us a comment
with your thoughts.&lt;/p&gt;</content><category term="Game Development"></category></entry><entry><title>How to Get Your Game to Done</title><link href="https://www.deengames.com/blog/2018/how-to-get-your-game-to-done.html" rel="alternate"></link><published>2018-05-09T00:00:00-04:00</published><updated>2018-05-09T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-05-09:/blog/2018/how-to-get-your-game-to-done.html</id><summary type="html">&lt;p&gt;&lt;img alt="image" src="https://i.imgur.com/TklGFnF.png"&gt;&lt;/p&gt;
&lt;p&gt;Most games never reach completion. Most of us know this -- especially programmers, who typically leave a trail of dead projects in their wake.  Well-intentioned projects, but incomplete projects none-the-less. &lt;/p&gt;
&lt;p&gt;What steps can you take to increase the chances of actually finishing, and get your game to that glorified "done" state …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image" src="https://i.imgur.com/TklGFnF.png"&gt;&lt;/p&gt;
&lt;p&gt;Most games never reach completion. Most of us know this -- especially programmers, who typically leave a trail of dead projects in their wake.  Well-intentioned projects, but incomplete projects none-the-less. &lt;/p&gt;
&lt;p&gt;What steps can you take to increase the chances of actually finishing, and get your game to that glorified "done" state?&lt;/p&gt;
&lt;p&gt;At Deen Games, we work in a team of two (or I sometimes work alone), part-time, without funding. The steps below outline our process -- one which, if we applied it consistently, would lead to us finishing many more games.  Each step in the process fulfills a specific purpose, which I will explain along the way.&lt;/p&gt;
&lt;p&gt;But first, a quick detour on why games fail.&lt;/p&gt;
&lt;h2&gt;Why Games Fail&lt;/h2&gt;
&lt;p&gt;Why do we fail to complete games so often? When you look at the bigger picture (across mutliple projects and teams), you find a number of common reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Overambitious:&lt;/strong&gt; Many games require much more time and effort than the instigators realize; often, when realization dawns, the thought of "it'll take &lt;em&gt;how&lt;/em&gt; many years for us to finish?" causes a game to reach the trash pile. This can be anything from requiring tons of game content to requiring art or audio capabilities beyond what we can deliver.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motivation:&lt;/strong&gt; Motivation dies near the middle of the project. Great teams can forage onward; but, many projects fail early because the original motivation just isn't there.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time Scale:&lt;/strong&gt; Some teams, like ours, are very sensitive to time; if a game starts to slog on, and on, and &lt;em&gt;on&lt;/em&gt; forever, we lose motivation (see above) and throw in the towel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Complexity:&lt;/strong&gt; As an indie, we can innovate without worry. However, projects that require complex features (eg. procedurally-generated branching storylines and quests) or complex content (hundreds of maps and events and quests) can stretch us beyond what we can achieve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having summarized the main failure points, let's dive into the process and see how we get around some of these issues.&lt;/p&gt;
&lt;h2&gt;Game Development Life Cycle&lt;/h2&gt;
&lt;p&gt;We don't really use agile; we just work linearly given whatever amount of time and energy we have (since we're part time). However, you can always break these stages into different stories and apply them to an agile/iterative life-cycle.&lt;/p&gt;
&lt;h3&gt;Craft a Motivational Vision&lt;/h3&gt;
&lt;p&gt;Every good game starts with a good vision. What are we trying to build? Is it a completely procedurally-generated 2D RPG, an Android game that teaches Arabic vocabulary to kids aged 4-8, or a stealth-based MMO? Write it down.&lt;/p&gt;
&lt;p&gt;The vision should be clear, and should list what we want to achieve by releasing this game; it should also be composed of &lt;em&gt;highly motivational statements for the team.&lt;/em&gt; When motivation slumps, we can review this, and get a burst of re-energizing/motivation.&lt;/p&gt;
&lt;h3&gt;Inject the Learning Goal&lt;/h3&gt;
&lt;p&gt;At Deen Games, we develop Islamic and educational games. The next step is to write down our goal: what do players get out of playing this game? The learning goal can be grand (eg. acquire fluency in a new language) or benign (get exposure to Muslim culture specific to Yemen), but it needs to be decided up-front.  Again, write it down.&lt;/p&gt;
&lt;p&gt;Without this, we tend to abandon projects because they don't make the world a better place in some way.&lt;/p&gt;
&lt;h3&gt;Brainstorm the Core Game Loop(s)&lt;/h3&gt;
&lt;p&gt;The core game loop (or loops) of your game, are those activities and actions the player plays over and over and over again. In a typical platformer, that's running, jumping, dodging; in an FPS, it's seeking weapons/ammo/armour, shooting, and dodging.&lt;/p&gt;
&lt;p&gt;This is really the fruit of the game design; the place where we codify the vision and learning goal into the &lt;em&gt;actual gameplay&lt;/em&gt;. This is how players learn (through experience), and how we communicate that through &lt;em&gt;the actual mechanics&lt;/em&gt; (instead of simply a story or dialog).&lt;/p&gt;
&lt;p&gt;This forms the core of your game; without this, your game won't be fun; motivation fizzles, fast.&lt;/p&gt;
&lt;h3&gt;Risk Analysis&lt;/h3&gt;
&lt;p&gt;I learned of Risk Analysis during my studies as a PMP. You want to analyze your project and find any risks -- those sneaky issues that, if they occur, could (or will certainly) cause the downfall of your project.&lt;/p&gt;
&lt;p&gt;Using risk analysis, you can quickly identify risks like the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The game requires a large world (overambitious or content complexity)&lt;/li&gt;
&lt;li&gt;We actually need a really good, custom-made level editor to make it (technical complexity)&lt;/li&gt;
&lt;li&gt;The procedural generation is really hard (technical complexity)&lt;/li&gt;
&lt;li&gt;The game won't work without very high-quality or a large quantity of good art (eg. interactive books)&lt;/li&gt;
&lt;li&gt;The game will take us years to build&lt;/li&gt;
&lt;li&gt;The game doesn't really achieve what our vision entailed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here in the process, you want to mitigate or minimize the risks. For example, maybe you're working on an underwater sea-life themed infinite runner, and your risk is that you need really good art.  Your options might include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the theme to something else (eg. cubes instead of animals).&lt;/li&gt;
&lt;li&gt;Settle on a simpler, achievable art style. Pixel art is often a choice here, because it's easy to create decent pixel art.&lt;/li&gt;
&lt;li&gt;Team up with someone who can create the art you need.&lt;/li&gt;
&lt;li&gt;Find an artist for hire who will charge a decent rate and get you the quality you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the worst case, if the project just can't be done, this is the time to go back to the brainstorming phase and see if you can come up with something different. Alternatively, you can acccept the risk and move on (but this often leads to failure).&lt;/p&gt;
&lt;h3&gt;Prototype to Find the Fun&lt;/h3&gt;
&lt;p&gt;Many games are not fun. And nothing is more demotivational than investing hours and hours into a game that's boring or tedious.  In this stage, prototype your game and find out what combination of features makes it fun.&lt;/p&gt;
&lt;p&gt;While prototyping is an art (and science), and something you should read more about, here are some of the key take-aways for this stage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the most minimal art possible -- coloured boxes. If it's fun at this stage, it'll be fun when it's full-blown production pipelined content; if it's not fun now, no amount of polish can make it fun.&lt;/li&gt;
&lt;li&gt;Focus on core game mechanics, or technical risk (eg. PCG algorithms)&lt;/li&gt;
&lt;li&gt;Avoid superficial things like stories, characters, names, etc. unless these are really key to make or break your game&lt;/li&gt;
&lt;li&gt;If the controls are okay, and it doesn't hurt the fun of the prototype, leave it as-is.&lt;/li&gt;
&lt;li&gt;Don't write a tutorial; writing good, interactive tutorials is really time-consuming. Ditto for writing the UI.&lt;/li&gt;
&lt;li&gt;Use feature toggles so you can quickly turn features on or off; this helps decide what the final game will be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chances are, you will find that your prototype &lt;em&gt;isn't&lt;/em&gt; the fun experience you thought it would be. No problem, recycle -- add things, change things, remove things, and iterate until you find the balance that &lt;em&gt;is&lt;/em&gt; fun -- or until you get tired (there's no way to make a butterfly simulator fun ... or is there?).&lt;/p&gt;
&lt;h3&gt;Validate your Prototype with Others&lt;/h3&gt;
&lt;p&gt;Show your prototype to your team members (hopefully they worked on it with you), friends, and family. Provide them with instructions (since the game likely has none). Listen to the feedback people give you on what works and doesn't; but be weary of suggestions for improvement (these are usually terrible and have nothing to do with your game vision and objectives).&lt;/p&gt;
&lt;p&gt;If you can get someone else (or a number of players) to agree that your prototype &lt;em&gt;really is fun&lt;/em&gt;, even at this stage, you're in business.&lt;/p&gt;
&lt;p&gt;If you didn't go back to the drawing board on your game, congratulations! You have an idea that sounds and &lt;em&gt;plays&lt;/em&gt; fun. This is the hardest part -- all you need to do now is complete it and ship it.&lt;/p&gt;
&lt;h3&gt;Create a Minimal Viable Product&lt;/h3&gt;
&lt;p&gt;Your game probably requires a lot of stuff -- levels, entities, art, algorithms, characters, text, a tutorial, and more!  At this stage, you probably realize that you can't possibly finish this game in a decent time-line (unless it's a very, &lt;em&gt;very&lt;/em&gt; simple game).&lt;/p&gt;
&lt;p&gt;You now need to focus on shipping. To do that, you need to pare the game down to &lt;em&gt;the core essence of the game.&lt;/em&gt; In a way, you already did this: you focused on your core game loop, and prototyped it until it was fun. You should now have a good idea of what your game entails.&lt;/p&gt;
&lt;p&gt;Now, think about every feature, every level, every piece of content. Ask yourself constantly: can I live without this? Can I ship my game without this? Or maybe not -- maybe, without this one element, there really &lt;em&gt;is&lt;/em&gt; no game.&lt;/p&gt;
&lt;p&gt;Organize your list of stuff into two broad buckets: MVP (really really need it) and a v2.0 bucket. Anything you don't need, keep it in the v2.0 bucket until after you complete the release (we'll come back to this).&lt;/p&gt;
&lt;p&gt;Keep your list of MVP items close at hand; ideally, you want to also prioritize it (in case you lose motivation in the middle and still want to ship something). &lt;/p&gt;
&lt;h3&gt;Get it Done&lt;/h3&gt;
&lt;p&gt;Once that's done, crank out your game. There's no magic to this; focus on the code, the content, everything and anything you need. As you work through things, you  may come up with new ideas or realizations of things you need to do; constantly ask yourself again, can I ship without this? And keep focused.&lt;/p&gt;
&lt;h3&gt;I18N on the Cheap&lt;/h3&gt;
&lt;p&gt;Translation is a difficult and complex process. Chances are that, within your circle of team members (and possibly family members or good friends), you will find people who are fluent in more than just English.&lt;/p&gt;
&lt;p&gt;Enlist them to translate your game into their native language! While the translation might not be great, it's much better to ship &lt;em&gt;something&lt;/em&gt; than to wait endlessly for that perfect translation to spring into being.&lt;/p&gt;
&lt;p&gt;Of course, if your game isn't easy to localize, you need to fix that first. And next time, make it localizable from the start! (Tip: it's easy enough to make a single class that fetches strings for the current language and returns them, and loads a simple JSON/XML/etc. file that contains the game strings.)&lt;/p&gt;
&lt;h3&gt;Test Thoroughly&lt;/h3&gt;
&lt;p&gt;When you finally finish your slog through the backlog of work, test the game thoroughly; test every possible feature, level, piece of content, and option. Enlist your teamies and friends -- they often find bugs by trying different workflows. (You tend to test the same content over and over and over during development, and get blind to the other options.)&lt;/p&gt;
&lt;p&gt;Once that's done, congratulations! You're ready to ship your game. Build the final executable, prepare your website/marketing material (eg. tweets), and unleash it on the world.&lt;/p&gt;
&lt;h2&gt;Beyond v1.0&lt;/h2&gt;
&lt;p&gt;At this point, we're technically done. You could put your game down and walk away, or take a breather to work on something else and come back. Either way, if you decide to invest more in your game, here's the good news: we're not done yet!&lt;/p&gt;
&lt;h3&gt;Monitor for Feedback&lt;/h3&gt;
&lt;p&gt;If you're blessed enough to have a big following on Twitter, or Itch.io/Steam/etc. (or the app store for your mobile platform), you will hear feedback. Listen to everything, and make a note somewhere. You need to sift through and prioritize this feedback, and decide what to ship (and not ship).&lt;/p&gt;
&lt;p&gt;Remember that v2.0 backlog of deferred work we created while finding our game MVP? Revisit it, look critically through it again, and rework it or reprioritize it.&lt;/p&gt;
&lt;h3&gt;Restart the Process&lt;/h3&gt;
&lt;p&gt;Given this combined backlog of stuff to work on, you can go back to the "brainstorming" phase. Pick a set of features, dust off your prototype, and add them. How do they affect the user experience? Are they worth integrating into the main game?&lt;/p&gt;
&lt;p&gt;When you know the answer, you can put those changes into your game and ship another small release. (Testing thoroughly is a good idea, and test automation helps here.) &lt;/p&gt;
&lt;p&gt;Publishing multiple small releases tends to give you more visibility and feedback across the internet, so repeat this as many times as you like.&lt;/p&gt;
&lt;h1&gt;In Conclusion&lt;/h1&gt;
&lt;p&gt;In this article, we covered a lot of ground. We started by looking at some of the common reasons game development projects failed, and then looked into our Deen Games current (ideal) process to see how we work around many of these failures.&lt;/p&gt;
&lt;p&gt;In doing so, we take a project through the stages of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a vision&lt;/li&gt;
&lt;li&gt;Crafting a learning goal&lt;/li&gt;
&lt;li&gt;Prototyping the core game mechanics&lt;/li&gt;
&lt;li&gt;Creating a small MVP&lt;/li&gt;
&lt;li&gt;Shipping our game&lt;/li&gt;
&lt;li&gt;Localizing our game on the cheap&lt;/li&gt;
&lt;li&gt;Monitoring for feedback&lt;/li&gt;
&lt;li&gt;Iterating and repeating to create incremental releases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you see any holes in our process? Do you have another process or different steps that work for you? Drop us a comment and let us know.&lt;/p&gt;</content><category term="Game Design"></category><category term="Project Management"></category></entry><entry><title>Blog Refresh</title><link href="https://www.deengames.com/blog/2018/blog-refresh.html" rel="alternate"></link><published>2018-04-04T00:00:00-04:00</published><updated>2018-04-04T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2018-04-04:/blog/2018/blog-refresh.html</id><summary type="html">&lt;p&gt;After a few months of stagnation on the blogging/marketing side, we're finally back! We hope, inshaAllah (God willing) to publish regular (or at least semi-regular) updates to our blog and our &lt;a href="https://twitter.com/nightblade9"&gt;current maintainer's Twitter account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Accordingly, we also ditched our old, homebrew-coded blog for something sleek and production-grade (built …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a few months of stagnation on the blogging/marketing side, we're finally back! We hope, inshaAllah (God willing) to publish regular (or at least semi-regular) updates to our blog and our &lt;a href="https://twitter.com/nightblade9"&gt;current maintainer's Twitter account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Accordingly, we also ditched our old, homebrew-coded blog for something sleek and production-grade (built in &lt;a href="https://github.com/getpelican/"&gt;Pelican&lt;/a&gt;) blog.&lt;/p&gt;
&lt;p&gt;Enjoy, and as usual, hit us up on Twitter to let us know what you think.&lt;/p&gt;</content><category term="News"></category></entry><entry><title>Talha's Migration, Week 6-7</title><link href="https://www.deengames.com/blog/2017/talhas-migration-week-6-7.html" rel="alternate"></link><published>2017-08-18T00:00:00-04:00</published><updated>2017-08-18T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2017-08-18:/blog/2017/talhas-migration-week-6-7.html</id><summary type="html">&lt;p&gt;&lt;a href="https://i.imgur.com/Xw5LHIs.gif"&gt;&lt;img src="https://i.imgur.com/Xw5LHIs.gif" width="672" height="378" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The last couple of weeks mostly entailed playtesting and game-balancing tweaks. As a result, we made a few visible changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Squid (blue rectangle) now move erratically and require more effort to capture.&lt;/li&gt;
&lt;li&gt;There's a new "Sense of Smell"  upgrade that materializes as a white arrow, and shows you where the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://i.imgur.com/Xw5LHIs.gif"&gt;&lt;img src="https://i.imgur.com/Xw5LHIs.gif" width="672" height="378" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The last couple of weeks mostly entailed playtesting and game-balancing tweaks. As a result, we made a few visible changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Squid (blue rectangle) now move erratically and require more effort to capture.&lt;/li&gt;
&lt;li&gt;There's a new "Sense of Smell"  upgrade that materializes as a white arrow, and shows you where the next creature will appear. In the GIF above, it predicts a shark, then a squid.&lt;/li&gt;
&lt;li&gt;Krill now appear in abundance, but net you only one food per catch.&lt;/li&gt;
&lt;li&gt;Shrank swimming crabs slightly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see these changes in the GIF above. We plan to continue playtesting and tweaking in the next weeks.&lt;/p&gt;
&lt;p&gt;We also nerfed the images back to coloured blocks, because that makes it easier to focus on gameplay rather than asthetics.&lt;/p&gt;</content><category term="Devlog"></category><category term="Talha's Migration"></category></entry><entry><title>Talha's Migration, Week 5</title><link href="https://www.deengames.com/blog/2017/talhas-migration-week-5.html" rel="alternate"></link><published>2017-08-04T00:00:00-04:00</published><updated>2017-08-04T00:00:00-04:00</updated><author><name>nightblade</name></author><id>tag:www.deengames.com,2017-08-04:/blog/2017/talhas-migration-week-5.html</id><summary type="html">&lt;p&gt;&lt;a href="https://i.imgur.com/SfuJvW7.gif"&gt;&lt;img src="https://i.imgur.com/SfuJvW7.gif" width="672" height="378" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week, we implemented the final feature work (seals and sharks). We left out one item (squids) due to a lack of time. You can see both seals and squids in the GIF above.&lt;/p&gt;
&lt;p&gt;As well, our artist finished the main character sprite, and it gives a game a very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://i.imgur.com/SfuJvW7.gif"&gt;&lt;img src="https://i.imgur.com/SfuJvW7.gif" width="672" height="378" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week, we implemented the final feature work (seals and sharks). We left out one item (squids) due to a lack of time. You can see both seals and squids in the GIF above.&lt;/p&gt;
&lt;p&gt;As well, our artist finished the main character sprite, and it gives a game a very different look.&lt;/p&gt;
&lt;p&gt;We also nailed down the final resolution at 960x540. You can click the image above to see the full size.&lt;/p&gt;
&lt;p&gt;Next week, we plan to add squids, and brainstorm (and add) more upgrades. Then, we can start polishing this game and release the first (minimal) version to get some user feedback.&lt;/p&gt;</content><category term="Devlog"></category></entry></feed>